@Logic
script StageService extends Logic

	property table data = {}

	property table idMap = {}

	property integer lastChapter = 0

	property integer lastStageIndex = 0

	@ExecSpace("Client")
	method table GetAllStage()
		return self.data
	end

	@ExecSpace("Client")
	method table GetStageByChapter(integer chapter)
		local list = {}
		
		for id, stage in pairs(self.data) do
			if stage["chapter"] ~= chapter then
				continue
			end
			
			list[#list + 1] = stage
		end
		
		return list
	end

	@ExecSpace("Client")
	method table GetStageById(string id)
		local index = self.idMap[id]
		local target = self.data[index]
		
		return target
	end

	@ExecSpace("Server")
	method table GetStageByIdFromServer(string id)
		local index = self.idMap[id]
		local target = self.data[index]
		
		return target
	end

	@ExecSpace("ServerOnly")
	method void OnBeginPlay()
		local dataSet = _DataService:GetTable("stage")
		
		local stageCount = dataSet:GetRowCount()
		
		for i = 1, stageCount do
			local stage = {}
			
			stage["id"] = tostring(dataSet:GetCell(i,"id"))
			stage["chapter"] = tonumber(dataSet:GetCell(i,"chapter"))
			stage["stage"] = tonumber(dataSet:GetCell(i,"stage"))
			stage["name"] = tostring(dataSet:GetCell(i,"name"))
			stage["info"] = tostring(dataSet:GetCell(i,"ruid_info"))
			stage["button"] = tostring(dataSet:GetCell(i,"ruid_button"))
			stage["enemy_tower_hp"] = tonumber(dataSet:GetCell(i,"enemy_tower_hp"))
			stage["stage_name"] = tostring(dataSet:GetCell(i,"name"))
			stage["stage_desc"] = tostring(dataSet:GetCell(i,"stage_desc"))
			stage["chapter_name"] = tostring(dataSet:GetCell(i,"chapter_name"))
			
			self.data[i] = stage
			self.idMap[stage.id] = i
			
			if self.lastChapter < stage.chapter then
				self.lastChapter = stage.chapter
			end
			
			self.lastStageIndex = i
		end
		log("STAGE SERVICE INIT DONE")
	end

	@ExecSpace("Client")
	method table GetNextOpenStageId(integer chapter, integer stage)
		local id = tostring(stage + 100 * chapter)
		local index = self.idMap[id]
		
		if index < #self.data then
			local nextStage = self.data[index + 1]
			
			return {
				chapter=nextStage.chapter,
				stage=nextStage.stage
			}
		end
		
		return {
			chapter=chapter,
			stage=stage
		}
	end

	@ExecSpace("Server")
	method void ReqUpdateStageData()
		self:UpdateStageDataCallback(_HttpService:JSONEncode(self.data), senderUserId)
	end

	@ExecSpace("Client")
	method void UpdateStageDataCallback(string json)
		if json == nil then
			return
		end
		
		local serverData = _HttpService:JSONDecode(json)
		
		for i, stage in ipairs(serverData) do
			self.data[i] = stage
			self.idMap[stage.id] = i
		end
	end

	@EventSender("Service", "UserService")
	handler HandleUserEnterEvent(UserEnterEvent event)
		--------------- Native Event Sender Info ----------------
		-- Sender: UserService
		-- Space: Server
		---------------------------------------------------------
		
		-- Parameters
		-- local ProfileCode = event.ProfileCode
		-- local UserId = event.UserId
		---------------------------------------------------------
		self:ReqUpdateStageData()
	end

end