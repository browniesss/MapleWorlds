@Logic
script SummonService extends Logic

	@Sync
	property SyncTable<string, string> summonResult

	@Sync
	property SyncTable<string, string> summonSetting

	property table summonCallback = {}

	@ExecSpace("ServerOnly")
	method table GetSummonPool(string PoolName)
		local summonPool = {}
		
		local dataSet = _DataService:GetTable(PoolName)
		for i = 1, dataSet:GetRowCount() do
			local item = {}
			
			item["ratio"] = tonumber(dataSet:GetCell(i,"ratio"))
			item["type"] = tostring(dataSet:GetCell(i,"type"))
			item["value"] = tostring(dataSet:GetCell(i,"value"))
			
			summonPool[#summonPool + 1]= item
		end
		
		return summonPool
	end

	@ExecSpace("Server")
	method void SummonOne(string pool_id)
		if self:Billing(senderUserId, pool_id, 1) ~= 0 then
			return
		end
		
		self:SummonAnimation()
		
		local pool = self:GetSummonPool(pool_id)
		local idList = {}
		
		local item = _RandomPicker:RadomPickFromTable(pool)
		idList[#idList + 1] = item.value
		
		local userCount = _UserSummonService:GET_SUMMON_COUNT(pool_id)
		if self:PICK_UP_CHECK(pool_id, (userCount + 1)) then
			local pickUpId = self:PICK_UP_CHAR(pool_id)
			if pickUpId == "" then
				log_error("fail to get pick up char from " ..  pool_id)
				return
			end
			
			idList[#idList] = pickUpId
		end
		
		_UserMonsterService:AddCount(senderUserId, idList)
		
		local needToResetUserSummonCount = self:CHECK_RESET_SUMMON_COUNT(pool_id, idList)
		if needToResetUserSummonCount == true then
			_UserSummonService:INIT_SUMMON_COUNT(senderUserId, pool_id)
		end
		if needToResetUserSummonCount == false then
			_UserSummonService:ADD_SUMMON_COUNT(senderUserId, pool_id, 1)
		end
		
		
		self.summonResult[pool_id] = _HttpService:JSONEncode(idList)
	end

	@ExecSpace("Server")
	method void SummonTen(string pool_id)
		if self:Billing(senderUserId, pool_id, 10) ~= 0 then
			return
		end
		
		self:SummonAnimation()
		
		local pool = self:GetSummonPool(pool_id)
		local idList = {}
		
		for i = 1, 10 do
			local item = _RandomPicker:RadomPickFromTable(pool)
			idList[#idList + 1] = item.value
		end
		
		local userCount = _UserSummonService:GET_SUMMON_COUNT(pool_id)
		if self:PICK_UP_CHECK(pool_id, (userCount + 10)) then
			local pickUpId = self:PICK_UP_CHAR(pool_id)
			if pickUpId == "" then
				log_error("fail to get pick up char from " ..  pool_id)
				return
			end
			
			local key = (DateTime.UtcNow.Elapsed % #idList)
			
			idList[key + 1] = pickUpId
		end
		
		_UserMonsterService:AddCount(senderUserId, idList)
		
		local needToResetUserSummonCount = self:CHECK_RESET_SUMMON_COUNT(pool_id, idList)
		if needToResetUserSummonCount == true then
			_UserSummonService:INIT_SUMMON_COUNT(senderUserId, pool_id)
		end
		if needToResetUserSummonCount == false then
			_UserSummonService:ADD_SUMMON_COUNT(senderUserId, pool_id, 10)
		end
		
		self.summonResult[pool_id] = _HttpService:JSONEncode(idList)
	end

	@ExecSpace("ServerOnly")
	method void OnBeginPlay()
		local dataSet = _DataService:GetTable("GachaSetting")
		for i = 1, dataSet:GetRowCount() do
			local item = {}
			
			item["id"] = tostring(dataSet:GetCell(i,"id"))
			item["money"] = tostring(dataSet:GetCell(i,"money")) 
			item["summon_1_value"] = tonumber(dataSet:GetCell(i,"summon_1_value"))
			item["summon_10_value"] = tonumber(dataSet:GetCell(i,"summon_10_value"))
			item["video"] = tostring(dataSet:GetCell(i,"video"))
			item["pickup_char_limit"] = tonumber(dataSet:GetCell(i,"pickup_char_limit"))
			item["pickup_char_id"] = tostring(dataSet:GetCell(i,"pickup_char_id"))
			
			local json = _HttpService:JSONEncode(item)
			
			self.summonSetting[item['id']]= json
		end
		
		
	end

	@ExecSpace("ServerOnly")
	method integer Billing(string uid, string poolId, integer count)
		local json = self.summonSetting[poolId]
		if json == nil then
			return -1
		end
		
		local setting = _HttpService:JSONDecode(json)
		
		if setting.money == "FIRST_COIN" then
			return _BillingService:UseFirstCoin(uid, setting[string.format("summon_%d_value", count)])
		end
		
		if setting.money == "SECOND_COIN" then
			return _BillingService:UseSecondCoin(uid, setting[string.format("summon_%d_value", count)])
		end
		
		return -2
	end

	@ExecSpace("ClientOnly")
	method void OnSyncProperty(string name, any value)
		local callback = self.summonCallback[name]
		if callback == nil then
			return
		end
		
		callback()
	end

	@ExecSpace("ClientOnly")
	method void AddSummonCallback(string name, any callback)
		self.summonCallback[name] = callback
	end

	@ExecSpace("Client")
	method void SummonAnimation()
		local animationTime = _Utils:GetRUIDTime("0ff504c93c8a404992806d1bbeb5ec3b")
		local animationUI = _EntityService:GetEntityByPath("/ui/GachaResultUI/SummonAnimationUI")
		
		animationUI.Visible = true
		_TimerService:SetTimerOnce(function()
			animationUI.Visible = false
		end, animationTime)
		
	end

	method table GET_SETTING(string pool_id)
		local json = self.summonSetting[pool_id]
		if json == nil then
			return {}
		end
		
		return _HttpService:JSONDecode(json)
	end

	@ExecSpace("ServerOnly")
	method boolean PICK_UP_CHECK(string pool_id, integer userCount)
		local json = self.summonSetting[pool_id]
		if json == nil then
			return false
		end
		
		local setting = _HttpService:JSONDecode(json)
		
		if setting.pickup_char_limit == 0 then
			return false
		end
		
		if setting.pickup_char_limit > userCount then
			return false
		end
		
		return true
	end

	@ExecSpace("ServerOnly")
	method string PICK_UP_CHAR(string pool_id)
		local json = self.summonSetting[pool_id]
		if json == nil then
			return ""
		end
		
		local setting = _HttpService:JSONDecode(json)
		
		return setting.pickup_char_id
	end

	@ExecSpace("ServerOnly")
	method boolean CHECK_RESET_SUMMON_COUNT(string pool_id, table idList)
		local json = self.summonSetting[pool_id]
		if json == nil then
			return false
		end
		
		local setting = _HttpService:JSONDecode(json)
		
		if setting.pickup_char_limit == 0 then
			return false
		end
		
		local char = setting.pickup_char_id
		if char == "-" then
			return false
		end
		
		for i, v in ipairs(idList) do
			if v == char then
				return true
			end
		end
		
		return false
	end

end