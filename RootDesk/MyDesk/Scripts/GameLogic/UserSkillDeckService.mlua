@Logic
script UserSkillDeckService extends Logic

	@ExecSpace("Server")
	method integer SAVE()
		local ds = _DataStorageService:GetUserDataStorage(senderUserId)
		
		local data = {}
		local playerSkillDeck = _EntityService:GetEntityByTag("Player").UserSkillDeck
		
		local deckList = {}
		for i, modelId in ipairs(playerSkillDeck.userSkillDeck) do
		    table.insert(deckList, modelId)
		end
		
		data["UserSkillDeck"] = deckList
		
		local save =  _HttpService:JSONEncode(data)
		
		log(save)
		return ds:SetAndWait("USER_SKILLDECK",save)
	end

	@ExecSpace("Server")
	method integer LOAD()
		local ds = _DataStorageService:GetUserDataStorage(senderUserId)
		local playerSkillDeck = _EntityService:GetEntityByTag("Player").UserSkillDeck
		
		local errCode, res = ds:GetAndWait("USER_SKILLDECK")
		if errCode ~= 0 then
			return errCode
		end
		
		if res == nil then
			log(res)
			local deckList = {}
			local data = {}
			
			local allUnit = _UserSkillService:DEFAULT_SKILL_SET()
			
			math.randomseed(os.time())
			for i = #allUnit, 2, -1 do
				local j = math.random(1, i)
				allUnit[i], allUnit[j] = allUnit[j], allUnit[i]
			end
			
			for i = 1,2 do
				deckList[i] = allUnit[i]
			end
			
			log(deckList)
			
			playerSkillDeck:SetUserSkillDeck(deckList)
			
			data["UserSkillDeck"] = deckList
			local save =  _HttpService:JSONEncode(data)
		
			return ds:SetAndWait("USER_SKILLDECK",save)
		end
		
		local resTable = _HttpService:JSONDecode(res)
		
		playerSkillDeck:SetUserSkillDeck(resTable["UserSkillDeck"])
		
		log(resTable)
		
		return 0
	end

	@ExecSpace("ClientOnly")
	@EventSender("Service", "UserService")
	handler HandleUserLeaveEvent(UserLeaveEvent event)
		self:SAVE()
	end

end