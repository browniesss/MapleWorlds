@Logic
script GameManager extends Logic

	property Entity skillSelectUI = "ec7b9d8d-b2c2-4ee8-b95c-58564c8a4763"

	property SyncTable<Entity> skillBtn

	property Entity shopUI = "e0ec4a39-4a35-4e17-95aa-c16dee01f5fa"

	property Entity infoUI = "a07f182a-214a-414d-b995-9863eaa71d62"

	property Entity unitShop = "fa5581b7-25d8-40c7-8b0f-ea16534303e2"

	property Entity skillSlots = "847312aa-e2d9-4375-9707-b0a2000cf8c0"

	@Sync
	property integer chapterIndex = 0

	@Sync
	property integer mapIndex = 0

	@Sync
	property boolean isTest = false

	@Sync
	property integer playStartTs = 0

	property Entity timeText = "f229ed5a-4dbc-4c26-8ff0-3fa8ebf7f5ce"

	@Sync
	property boolean isPlaying = false

	@Sync
	property integer timer = 0

	property Entity gameClearResult = "bd109aaa-b307-4160-b918-a09b05a6d4d9"

	property RankUI rankUI = "daa5b02b-f478-4f97-a216-d17e6b71634a"

	property Entity failPopupUI = "60300db6-e074-4ae3-9db1-9142f3a47a24"

	property Entity joystick = "02c6fd20-fdb0-4b80-bbd3-2241e929c46d"

	property Entity screenSkillUI = "c735233f-679d-4f6d-a9c2-ab9db46c5bd6"

	property Entity loadingUI = "8430a269-3cee-4cf9-a07c-ba7e814a8051"

	@Sync
	property number loadingTimer = 0

	@Sync
	property number timerStep = 0

	@Sync
	property number steps = 0

	@ExecSpace("ClientOnly")
	method void OnBeginPlay()
		-- 스킬 선택 UI 비활성화
		-- for i = 1, 3 do
			-- table.insert(self.skillBtn, self.skillSelectUI.Children[i])
		-- end
	end

	@ExecSpace("Client")
	method void OpenSkillSelect()
		_TweenLogic:MoveTo(self.skillSelectUI, Vector2(0, 0), 0.3, EaseType.CircEaseIn)
		
		local currentIngameSkills = _UserService.LocalPlayer.PlayerCharacter.ingameSkills
		local allSkillData = _SkillManager.ingameSkillData
		
		-- 후보 스킬 목록 생성
		local availableSkills = {}
		for skillID, baseData in pairs(allSkillData) do
		    local currentLevel = currentIngameSkills[skillID] or 0
		    if currentLevel < baseData["maxLevel"] then
		        table.insert(availableSkills, skillID)
		    end
		end
		
		-- 선택할 수 있는 스킬 수 결정 (최대 3개)
		local choiceCount = math.min(3, #availableSkills)
		if choiceCount == 0 then
		    return
		end
		
		-- 랜덤으로 3개 뽑기
		for i = 1, choiceCount do
		    local index = math.random(1, #availableSkills)
		    local skillID = availableSkills[index]
		    local skillData = allSkillData[skillID]
		    table.remove(availableSkills, index)  -- 같은 스킬 중복 방지
		
			local currentLevel = currentIngameSkills[skillID] or 0
		    local descList = _UtilLogic:Split(skillData["desc"], "|")
		    local descIndex = math.min(currentLevel + 1, #descList)  -- 선택창은 "다음 레벨" 설명을 보여주기 위해 +1
		
		    local selectedDesc = descList[descIndex] or "설명이 없습니다."
		
		    -- UI 버튼에 정보 넣기
		    self.skillBtn[i].Children[1].SpriteGUIRendererComponent.ImageRUID = skillData["icon"]
		    self.skillBtn[i].Children[2].TextComponent.Text = skillData["name"]
		    self.skillBtn[i].Children[3].TextComponent.Text = selectedDesc
		    self.skillBtn[i].SkillButton.skillID = skillID
		end
		
		-- 만약 선택지 수가 3개 미만이면 나머지 버튼은 비활성화
		for i = choiceCount + 1, 3 do
		    self.skillBtn[i].Children[1].SpriteGUIRendererComponent.ImageRUID = ""
		    self.skillBtn[i].Children[2].TextComponent.Text = ""
		    self.skillBtn[i].Children[3].TextComponent.Text = ""
		    self.skillBtn[i].SkillButton.skillID = nil
		end
	end

	@ExecSpace("Client")
	method void CloseSkillSelect()
		_TweenLogic:MoveTo(self.skillSelectUI, Vector2(0, -800), 0.3, EaseType.CircEaseOut)
	end

	@ExecSpace("Server")
	method void GameStart(integer chapterIndex, integer mapIndex)
		self.chapterIndex = chapterIndex
		self.mapIndex = mapIndex
		self.isPlaying = true
		self.playStartTs = DateTime.UtcNow.Elapsed
		
		
		local key = _RankingService:GetRankKeyByTable({chapter=chapterIndex, stage=mapIndex})
		_RankingService:FETCH(key)
		
		self:SetPlayerCharacter()
		self:EnableUI()
		
		self:SetTimer()
		
		local stageData = _StageService:GetStageByIdFromServer(tostring(mapIndex + 100 * chapterIndex))
		local enemyTower = _EntityService:GetEntityByPath(self:GetGameMapName().."/EnemyTower")
		
		enemyTower.Unit.originMaxHP = stageData["enemy_tower_hp"]
		enemyTower.Unit.maxHP = stageData["enemy_tower_hp"]
		enemyTower.Unit.hp = stageData["enemy_tower_hp"]
	end

	method void GameEnd()
		-- 인게임 UI 비활성화
		self.shopUI.Enable = false
		self.shopUI.Visible = false
		self.infoUI.Enable = false
		self.infoUI.Visible = false
		self.gameClearResult.Enable = false
		self.gameClearResult.Visible = false
		self.failPopupUI.Enable = false
		self.failPopupUI.Visible = false
		
		self:ClearObjects()
		self:ClearTimer()
		self:ClearGameData()
		self:ClearGameDataInClient()
	end

	method string GetGameMapName()
		if self.isTest then
			return "/maps/TestMap"
		end
		
		return "/maps/Stage"..self.chapterIndex.."0"..self.mapIndex
	end

	@ExecSpace("Client")
	method void EnableUI()
		-- 인게임 UI 활성화
		self.shopUI.Enable = true
		self.shopUI.Visible = true
		self.infoUI.Enable = true
		self.infoUI.Visible = true
		self.gameClearResult.Enable = false
		self.gameClearResult.Visible = false
		self.joystick.Enable = false
		self.joystick.Visible = false
		
		-- 불필요한 UI 비활성화
		self.failPopupUI.Enable = false
		self.failPopupUI.Visible = false
		
		-- 모바일 환경 지원
		if Environment:IsMobilePlatform() then
			self.joystick.Enable = true
			self.joystick.Visible = true
		end
		
		
		-- 닉네임 설정
		local userNameUI = _EntityService:GetEntityByPath("/ui/Ingame_Info_UI_Group/UserInfo/UserName")
		userNameUI.TextComponent.Text = _UserService.LocalPlayer.PlayerComponent.Nickname
		
		self.unitShop.UnitShop:InitShop()
		
		for i = 1, 2 do
		    local child = self.skillSlots.Children[i]
		    if child ~= nil then
				child.SkillSlot:Initialize()
		    end
		end
	end

	@ExecSpace("Client")
	method void SetPlayerCharacter()
		local player = _UserService.LocalPlayer.UserSkillDeck
		
		
		local skill1 = _SkillService:GetSkillByIDFromClient(player.userSkillDeck[1])
		local skill2 = _SkillService:GetSkillByIDFromClient(player.userSkillDeck[2])
		
		_UserService.LocalPlayer.PlayerCharacter:SetSkill(skill1, skill2)
	end

	method void ClearObjects()
		local myMonsterList = _EntityService:GetEntityByPath(self:GetGameMapName().."/MyMonsterList")
		local enemyList = _EntityService:GetEntityByPath(self:GetGameMapName().."/EnemyList")
		local skillParent = _EntityService:GetEntityByPath(self:GetGameMapName().."/SkillParent")
		local ProjectileParent = _EntityService:GetEntityByPath(self:GetGameMapName().."/ProjectileParent")
		local minimap = _EntityService:GetEntityByPath("/ui/Ingame_Info_UI_Group/Minimap Group/Minimap Background")
		local timeText = _EntityService:GetEntityByPath("/ui/Ingame_Info_UI_Group/CenterUI/TimeText")
		
		-- 첫 번째 자식은 유지
		self:DestroyChildren(myMonsterList, true)
		self:DestroyChildren(enemyList, true)
		self:DestroyChildrenInClient(minimap, true)
		
		-- 전부 삭제
		self:DestroyChildren(skillParent, false)
		self:DestroyChildren(ProjectileParent, false)
		
		timeText.TextComponent.Text = "0:00"
	end

	@ExecSpace("Server")
	method void DestroyChildren(Entity entity, boolean keepFirst)
		if not entity or not entity.Children then return end
			local targets = {}
			for idx, child in ipairs(entity.Children) do
				if not keepFirst or idx ~= 1 then
					table.insert(targets, child)
				end
			end
			for _, e in ipairs(targets) do
				if e and e.Destroy then
					e:Destroy()
				end
			end
	end

	@ExecSpace("Client")
	method void DestroyChildrenInClient(Entity entity, boolean keepFirst)
		if not entity or not entity.Children then return end
			local targets = {}
			for idx, child in ipairs(entity.Children) do
				if not keepFirst or idx ~= 1 then
					table.insert(targets, child)
				end
			end
			for _, e in ipairs(targets) do
				if e and e.Destroy then
					e:Destroy()
				end
			end
	end

	@ExecSpace("Client")
	method void SetTimer()
		self.timer = _TimerService:SetTimerRepeat(function()
			local playTime = DateTime.UtcNow.Elapsed - self.playStartTs
			self.timeText.TextComponent.Text = self:FormatMMSS(playTime / 1000)
		end, 1.0, 0)
	end

	@ExecSpace("Client")
	method void ClearTimer()
		self.playStartTs = 0
		_TimerService:ClearTimer(self.timer)
	end

	@ExecSpace("Server")
	method void ClearGameData()
		self.isPlaying = false
		
		local mesoWallet = _EntityService:GetEntityByPath(_GameManager:GetGameMapName() .. "/userWallet")
		
		mesoWallet.MesoWallet:SetMeso(0) 
	end

	@ExecSpace("Client")
	method void ClearGameDataInClient()
		local skillSlots = _EntityService:GetEntityByPath("/ui/Ingame_Shop_Group/SkillSlots")
		
		for i = 1, 2 do
			skillSlots.Children[i].SkillSlot.remainingTime = 0
			skillSlots.Children[i].Children[2].SpriteGUIRendererComponent.FillAmount = 0
		end
	end

	method string FormatMMSS(number time)
		local s = math.max(0, math.floor(time))
		local m = math.floor(s / 60)
		local ss = s % 60
		
		return string.format("%d:%02d", m, ss)
	end

	@ExecSpace("Client")
	method void StageClear()
		local playTime = DateTime.UtcNow.Elapsed - self.playStartTs 
		
		local userName = _UserService.LocalPlayer.PlayerComponent.Nickname
		
		local userStage = _UserService.LocalPlayer.UserStage
		
		local userAvatar = _EntityService:GetEntityByPath("/ui/GameClearUI/Frame/UserAvatar/UnitAvartar")
		
		if userStage:isLastStageSelected() then
			local nextStage = _StageService:GetNextOpenStageId(userStage.openChapter, userStage.openStage)
			
			userStage:SetClearStage(nextStage.chapter, nextStage.stage)
		end
		
		local key = _RankingService:GetRankKeyByTable({chapter=userStage.selectChapter, stage=userStage.selectStage})
		_RankingService:AddPoint(key, userName, playTime)
		
		self.rankUI:UpdateRankData(userName, playTime)
		
		self.gameClearResult.Enable = true
		self.gameClearResult.Visible = true
		
		userAvatar.AvatarGUIRendererComponent:PlayEmotion(EmotionalType.Love, 100)
	end

	method void ShowLoadingScreen()
		self.loadingUI.Enable = true
		self.loadingUI.Visible = true
		
		local color = self.loadingUI.SpriteGUIRendererComponent.Color
		self.loadingUI.SpriteGUIRendererComponent.Color = Color(color.r, color.g, color.b, 0)
		self:FadeSprite(1, 0.35, false)
	end

	method void HideLoadingScreen()
		local color = self.loadingUI.SpriteGUIRendererComponent.Color
		self.loadingUI.SpriteGUIRendererComponent.Color = Color(color.r, color.g, color.b, 0)
		self:FadeSprite(0, 0.35, true)
	end

	method void FadeSprite(number targetAlpha, number duration, boolean isFadeOut)
		duration = duration or 0.35  -- 기본 0.35초
		
		local t, tick = 0, 1/60
		
		self.steps = math.ceil(duration / tick)
		self.timerStep = 0
		
		self.loadingTimer = _TimerService:SetTimerRepeat(function()
		    self.timerStep = self.timerStep + 1
			
		    local progress = math.min(self.timerStep / self.steps, 1.0)
			local sprite = self.loadingUI.SpriteGUIRendererComponent
			local slimeSprite = self.loadingUI.Children[1].SpriteGUIRendererComponent
			local loadingText = self.loadingUI.Children[2].TextComponent
			local startColor = sprite.Color
			local endColor = Color(startColor.r, startColor.g, startColor.b, targetAlpha)
			local startSlimeColor = slimeSprite.Color
			local endSlimeColor = Color(startSlimeColor.r, startSlimeColor.g, startSlimeColor.b, targetAlpha)
			local startTextColor = loadingText.FontColor
			local endTextColor = Color(startTextColor.r, startTextColor.g, startTextColor.b, targetAlpha)
			
		    sprite.Color = Color.Lerp(startColor, endColor, progress)
		    slimeSprite.Color = Color.Lerp(startSlimeColor, endSlimeColor, progress)
		    loadingText.FontColor = Color.Lerp(startTextColor, endTextColor, progress)
		
		    -- 마지막 스텝이면 보장 처리
		    if progress >= 1 then
		        sprite.Color = endColor
		        _TimerService:ClearTimer(self.loadingTimer)
		    end
		end, tick, 0)
		
		if isFadeOut then
			_TimerService:SetTimerOnce(function()
				self.loadingUI.Enable = false
				self.loadingUI.Visible = false
			end, self.steps * tick)
		end
	end

	method table GetPreLoadAssetRuid()
		local ruids = {
			-- 스킬 이펙트
			"ecb14916022b462280c1bad3ca065037",
			"dac3d68cd9ba4140b99f373af6902f35",
			"288b2ca13ae34efc987c49ac0bb22f79",
			"cba42a77a12e48059240908f043a86d8",
			"b803d7da0da346f0bec889ff7237f577",
			"367e8d056ca645609c1cf3644c1701cc",
			"17e2069a32664309bae1ded3231b08c3",
			"367e8d056ca645609c1cf3644c1701cc",
			"2ed6be9152eb4bf0b22f4ca6e6fff9fe",
			"5c2c13c481ba476294bff7e9e04df837",
			"ee5acf09f4a24ea2b3e4d1a75133efde",
			"21d3f2eb72284632b9916896cbf8aaf6",
			"32eff4d4e0fe4abb92415cbafac88463",
			"5468cadd2f60428e925bc368968e1a1e",
			"01c803531e2c4e5aa3c3ef66f14711b8",
			"b104c97432904f1e8454fec526910e7e",
			"8a8c9a735036433c9f63d4ff4328b7d9",
			"92f5e05881614a50a58ea58b59fc7752",
			"9ecf53652b4a437da81417bcd8fb58ca",
			"5b382e3dd14b430480b729cc3cb56c82",
			"cf9c9a3f22b744e1a8093c3e5b58275b",
			"a5cf9699c4884016b08da58213ad82a7",
			"64096440f11f4c9b9c96df38e0e3852e",
			"288b2ca13ae34efc987c49ac0bb22f79",
			"42b6deb653a84c06abd29d667370bd81",
			"aae5027da69747d3b2cd2bd0f26987e0",
			"88a17d40d6e34abd948cac09724b22fa",
			"68fc685a9b9d41e796a5527a0eeb2ed9",
			"d577178a8212489e8319a4c5b16e897b",
			"895ac1e384ea42ca8dd084f54ff3346b",
			"f342e1d9953f46e9ab003ba0e363ee2a",
			"e7d59b726e2e40bc83b1e45784d483d7",
			"b43ff36b9c8544b88acee9ce595bfaf2",
			"ce6326eea3ce460dae93974f0196802e",
			"c763524d44514af5a97687eaea121a0a",
			"a59b9339cc7e4d579e8d3389e1c95149",
			"5ea66e0bd8e0441aac5960fb07f33b74",
			"a9b96bc94f514d00841324fc109aef46",
			"380e3a973b1b4d92902ccba71e154416",
			"bbe813c49cd84df9b59feeedb8dcba84",
			"bbe813c49cd84df9b59feeedb8dcba84",
			"57ed09e2b50a440cbf37c07ec7a7551e",
			"2196093c814147f284f87cdab417a7c2",
			"c70059c7bed2422ebd10392459245ce9",
			"b4c0d437b75d4c819df324e91dfe77a5",
			"89dc8084a49143eeaaefd7c9969aa9b8",
			"8de7ae7682434774b20a229194dbf8fb",
			
		}
		
		return ruids
	end

	@EventSender("Service", "InputService")
	handler HandleKeyDownEvent(KeyDownEvent event)
		--------------- Native Event Sender Info ----------------
		-- Sender: InputService
		-- Space: Client
		---------------------------------------------------------
		
		-- Parameters
		local key = event.key
		---------------------------------------------------------
		if key == KeyboardKey.C then
			self:OpenSkillSelect()
		end
	end

end