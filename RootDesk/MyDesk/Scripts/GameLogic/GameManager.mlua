@Logic
script GameManager extends Logic

	property Entity skillSelectUI = "ec7b9d8d-b2c2-4ee8-b95c-58564c8a4763"

	property SyncTable<Entity> skillBtn

	property Entity shopUI = "e0ec4a39-4a35-4e17-95aa-c16dee01f5fa"

	property Entity infoUI = "a07f182a-214a-414d-b995-9863eaa71d62"

	property Entity unitShop = "fa5581b7-25d8-40c7-8b0f-ea16534303e2"

	property Entity skillSlots = "847312aa-e2d9-4375-9707-b0a2000cf8c0"

	@Sync
	property integer chapterIndex = 0

	@Sync
	property integer mapIndex = 0

	@Sync
	property boolean isTest = false

	@Sync
	property integer playStartTs = 0

	property Entity timeText = "f229ed5a-4dbc-4c26-8ff0-3fa8ebf7f5ce"

	@Sync
	property boolean isPlaying = false

	@Sync
	property integer timer = 0

	property Entity gameClearResult = "bd109aaa-b307-4160-b918-a09b05a6d4d9"

	property RankUI rankUI = "daa5b02b-f478-4f97-a216-d17e6b71634a"

	property Entity failPopupUI = "6f1b960c-08f8-41f2-93e4-3e585ec70ab8"

	property Entity joystick = "02c6fd20-fdb0-4b80-bbd3-2241e929c46d"

	property Entity screenSkillUI = "c735233f-679d-4f6d-a9c2-ab9db46c5bd6"

	property Entity loadingUI = "8430a269-3cee-4cf9-a07c-ba7e814a8051"

	@Sync
	property number loadingTimer = 0

	@Sync
	property number timerStep = 0

	@Sync
	property number steps = 0

	property Entity mapTextUI = "1374988d-d50e-4f9c-8bb8-e158f9b3decf"

	@Sync
	property number NewValue1 = 0

	@ExecSpace("ClientOnly")
	method void OnBeginPlay()
		-- 스킬 선택 UI 비활성화
		-- for i = 1, 3 do
			-- table.insert(self.skillBtn, self.skillSelectUI.Children[i])
		-- end
	end

	@ExecSpace("Client")
	method void OpenSkillSelect()
		_TweenLogic:MoveTo(self.skillSelectUI, Vector2(0, 0), 0.3, EaseType.CircEaseIn)
		
		local currentIngameSkills = _UserService.LocalPlayer.PlayerCharacter.ingameSkills
		local allSkillData = _SkillManager.ingameSkillData
		
		-- 후보 스킬 목록 생성
		local availableSkills = {}
		for skillID, baseData in pairs(allSkillData) do
		    local currentLevel = currentIngameSkills[skillID] or 0
		    if currentLevel < baseData["maxLevel"] then
		        table.insert(availableSkills, skillID)
		    end
		end
		
		-- 선택할 수 있는 스킬 수 결정 (최대 3개)
		local choiceCount = math.min(3, #availableSkills)
		if choiceCount == 0 then
		    return
		end
		
		-- 랜덤으로 3개 뽑기
		for i = 1, choiceCount do
		    local index = math.random(1, #availableSkills)
		    local skillID = availableSkills[index]
		    local skillData = allSkillData[skillID]
		    table.remove(availableSkills, index)  -- 같은 스킬 중복 방지
		
			local currentLevel = currentIngameSkills[skillID] or 0
		    local descList = _UtilLogic:Split(skillData["desc"], "|")
		    local descIndex = math.min(currentLevel + 1, #descList)  -- 선택창은 "다음 레벨" 설명을 보여주기 위해 +1
		
		    local selectedDesc = descList[descIndex] or "설명이 없습니다."
		
		    -- UI 버튼에 정보 넣기
		    self.skillBtn[i].Children[1].SpriteGUIRendererComponent.ImageRUID = skillData["icon"]
		    self.skillBtn[i].Children[2].TextComponent.Text = skillData["name"]
		    self.skillBtn[i].Children[3].TextComponent.Text = selectedDesc
		    self.skillBtn[i].SkillButton.skillID = skillID
		end
		
		-- 만약 선택지 수가 3개 미만이면 나머지 버튼은 비활성화
		for i = choiceCount + 1, 3 do
		    self.skillBtn[i].Children[1].SpriteGUIRendererComponent.ImageRUID = ""
		    self.skillBtn[i].Children[2].TextComponent.Text = ""
		    self.skillBtn[i].Children[3].TextComponent.Text = ""
		    self.skillBtn[i].SkillButton.skillID = nil
		end
	end

	@ExecSpace("Client")
	method void CloseSkillSelect()
		_TweenLogic:MoveTo(self.skillSelectUI, Vector2(0, -800), 0.3, EaseType.CircEaseOut)
	end

	@ExecSpace("Server")
	method void GameStart(integer chapterIndex, integer mapIndex)
		self.chapterIndex = chapterIndex
		self.mapIndex = mapIndex
		self.isPlaying = true
		self.playStartTs = DateTime.UtcNow.Elapsed
		
		
		local key = _RankingService:GetRankKeyByTable({chapter=chapterIndex, stage=mapIndex})
		
		self:SetPlayerCharacter()
		self:EnableUI()
		
		self:SetTimer()
		self:GameStartDataInClient(chapterIndex, mapIndex)
		
		local stageData = _StageService:GetStageByIdFromServer(tostring(mapIndex + 100 * chapterIndex))
		local playerTower = _EntityService:GetEntityByPath(self:GetGameMapName().."/PlayerTower")
		local enemyTower = _EntityService:GetEntityByPath(self:GetGameMapName().."/EnemyTower")
		local ourHealthBar = _EntityService:GetEntityByPath("/ui/Ingame_Info_UI_Group/Player_HP_bar")
		local enemyHealthBar = _EntityService:GetEntityByPath("/ui/Ingame_Info_UI_Group/EnemyHealthBar")
		
		enemyTower.Unit.originMaxHP = stageData["enemy_tower_hp"]
		enemyTower.Unit.maxHP = stageData["enemy_tower_hp"]
		enemyTower.Unit.hp = stageData["enemy_tower_hp"]
		playerTower.Unit.originMaxHP = 500
		playerTower.Unit.maxHP = 500
		playerTower.Unit.hp = 500
	end

	@ExecSpace("Client")
	method void GameStartDataInClient(integer chapterIndex, integer mapIndex)
		local ourHealthBarUI = _EntityService:GetEntityByPath("/ui/Ingame_Info_UI_Group/Player_HP_bar")
		local enemyHealthBarUI = _EntityService:GetEntityByPath("/ui/Ingame_Info_UI_Group/EnemyHealthBar")
		local playerTower = _EntityService:GetEntityByPath(self:GetGameMapName().."/PlayerTower")
		local enemyTower = _EntityService:GetEntityByPath(self:GetGameMapName().."/EnemyTower")
		
		ourHealthBarUI.OurHealthBar.tower = playerTower
		enemyHealthBarUI.EnemyHealthBar.tower = enemyTower
		self.mapTextUI.TextComponent.Text = _StageService:GetStageById(tostring(chapterIndex * 100 + mapIndex)).name
	end

	method void GameEnd()
		-- 인게임 UI 비활성화
		self.shopUI.Enable = false
		self.shopUI.Visible = false
		self.infoUI.Enable = false
		self.infoUI.Visible = false
		self.gameClearResult.Enable = false
		self.gameClearResult.Visible = false
		self.failPopupUI.Enable = false
		self.failPopupUI.Visible = false
		
		self:ClearObjects()
		self:ClearTimer()
		self:ClearGameData()
		self:ClearGameDataInClient()
	end

	method string GetGameMapName()
		if self.isTest then
			return "/maps/TestMap"
		end
		
		return "/maps/Stage"..self.chapterIndex.."0"..self.mapIndex
	end

	@ExecSpace("Client")
	method void EnableUI()
		-- 인게임 UI 활성화
		self.shopUI.Enable = true
		self.shopUI.Visible = true
		self.infoUI.Enable = true
		self.infoUI.Visible = true
		self.gameClearResult.Enable = false
		self.gameClearResult.Visible = false
		self.joystick.Enable = false
		self.joystick.Visible = false
		
		-- 불필요한 UI 비활성화
		self.failPopupUI.Enable = false
		self.failPopupUI.Visible = false
		
		-- 모바일 환경 지원
		if Environment:IsMobilePlatform() then
			self.joystick.Enable = true
			self.joystick.Visible = true
		end
		
		
		-- 닉네임 설정
		local userNameUI = _EntityService:GetEntityByPath("/ui/Ingame_Info_UI_Group/UserInfo/UserName")
		userNameUI.TextComponent.Text = _UserService.LocalPlayer.PlayerComponent.Nickname
		
		self.unitShop.UnitShop:InitShop()
		
		for i = 1, 2 do
		    local child = self.skillSlots.Children[i]
		    if child ~= nil then
				child.SkillSlot:Initialize()
		    end
		end
	end

	@ExecSpace("Client")
	method void SetPlayerCharacter()
		local player = _UserService.LocalPlayer.UserSkillDeck
		
		
		local skill1 = _SkillService:GetSkillByIDFromClient(player.userSkillDeck[1])
		local skill2 = _SkillService:GetSkillByIDFromClient(player.userSkillDeck[2])
		
		_UserService.LocalPlayer.PlayerCharacter:SetSkill(skill1, skill2)
	end

	method void ClearObjects()
		local myMonsterList = _EntityService:GetEntityByPath(self:GetGameMapName().."/MyMonsterList")
		local enemyList = _EntityService:GetEntityByPath(self:GetGameMapName().."/EnemyList")
		local skillParent = _EntityService:GetEntityByPath(self:GetGameMapName().."/SkillParent")
		local ProjectileParent = _EntityService:GetEntityByPath(self:GetGameMapName().."/ProjectileParent")
		local minimap = _EntityService:GetEntityByPath("/ui/Ingame_Info_UI_Group/Minimap Group/Minimap Background")
		local timeText = _EntityService:GetEntityByPath("/ui/Ingame_Info_UI_Group/CenterUI/TimeText")
		
		-- 첫 번째 자식은 유지
		self:DestroyChildren(myMonsterList, true)
		self:DestroyChildren(enemyList, true)
		self:DestroyChildrenInClient(minimap, true)
		
		-- 전부 삭제
		self:DestroyChildren(skillParent, false)
		self:DestroyChildren(ProjectileParent, false)
		
		timeText.TextComponent.Text = "0:00"
	end

	@ExecSpace("Server")
	method void DestroyChildren(Entity entity, boolean keepFirst)
		if not entity or not entity.Children then return end
			local targets = {}
			for idx, child in ipairs(entity.Children) do
				if not keepFirst or idx ~= 1 then
					table.insert(targets, child)
				end
			end
			for _, e in ipairs(targets) do
				if e and e.Destroy then
					e:Destroy()
				end
			end
	end

	@ExecSpace("Client")
	method void DestroyChildrenInClient(Entity entity, boolean keepFirst)
		if not entity or not entity.Children then return end
			local targets = {}
			for idx, child in ipairs(entity.Children) do
				if not keepFirst or idx ~= 1 then
					table.insert(targets, child)
				end
			end
			for _, e in ipairs(targets) do
				if e and e.Destroy then
					e:Destroy()
				end
			end
	end

	@ExecSpace("Server")
	method void SetTimer()
		self.timer = _TimerService:SetTimerRepeat(function()
			local playTime = DateTime.UtcNow.Elapsed - self.playStartTs
			
			self:SetTimeText(playTime)
		end, 1.0, 0)
	end

	@ExecSpace("Client")
	method void ClearTimer()
		self.playStartTs = 0
		_TimerService:ClearTimer(self.timer)
	end

	@ExecSpace("Client")
	method void SetTimeText(integer playTime)
		self.timeText.TextComponent.Text = self:FormatMMSS(playTime / 1000)
	end

	@ExecSpace("Server")
	method void ClearGameData()
		self.isPlaying = false
		
		local mesoWallet = _EntityService:GetEntityByPath(_GameManager:GetGameMapName() .. "/userWallet")
		
		mesoWallet.MesoWallet:SetMeso(0) 
	end

	@ExecSpace("Client")
	method void ClearGameDataInClient()
		local skillSlots = _EntityService:GetEntityByPath("/ui/Ingame_Shop_Group/SkillSlots")
		
		for i = 1, 2 do
			skillSlots.Children[i].SkillSlot.remainingTime = 0
			skillSlots.Children[i].Children[2].SpriteGUIRendererComponent.FillAmount = 0
		end
	end

	method string FormatMMSS(number time)
		local s = math.max(0, math.floor(time))
		local m = math.floor(s / 60)
		local ss = s % 60
		
		return string.format("%d:%02d", m, ss)
	end

	@ExecSpace("Client")
	method void StageClear()
		local playTime = DateTime.UtcNow.Elapsed - self.playStartTs 
		
		local userName = _UserService.LocalPlayer.PlayerComponent.Nickname
		
		local userStage = _UserService.LocalPlayer.UserStage
		
		local userAvatar = _EntityService:GetEntityByPath("/ui/GameClearUI/Frame/UserAvatar/UnitAvartar")
		
		local key = _RankingService:GetRankKeyByTable({chapter=userStage.selectChapter, stage=userStage.selectStage})
		_RankingService:AddPoint(key, userName, playTime)
		self.rankUI:UpdateRankData(userName, playTime, key)
		
		local isFirstClear = false
		if userStage:isLastStageSelected() then
			local nextStage = _StageService:GetNextOpenStageId(userStage.openChapter, userStage.openStage)
		
			
			userStage:SetClearStage(nextStage.chapter, nextStage.stage)
			isFirstClear = true
		end
		
		self:StageClearServer(isFirstClear)
		
		self.gameClearResult.Enable = true
		self.gameClearResult.Visible = true
		
		_Utils:FadeIn(self.gameClearResult, 0.5)
		
		userAvatar.AvatarGUIRendererComponent:PlayEmotion(EmotionalType.Love, 100)
	end

	@ExecSpace("Server")
	method void StageClearServer(boolean isFirstClear)
		if isFirstClear == false then
			
			return
		end
		_PlayCoinService:AddCoin(senderUserId, 1)
		_BillingService:AddSecondFreeCoin(senderUserId, 500)
	end

	method void ShowLoadingScreen()
		self.loadingUI.Enable = true
		self.loadingUI.Visible = true
		
		local color = self.loadingUI.SpriteGUIRendererComponent.Color
		self.loadingUI.SpriteGUIRendererComponent.Color = Color(color.r, color.g, color.b, 0)
		self:FadeSprite(1, 0.35, false)
	end

	method void HideLoadingScreen()
		local color = self.loadingUI.SpriteGUIRendererComponent.Color
		self.loadingUI.SpriteGUIRendererComponent.Color = Color(color.r, color.g, color.b, 0)
		self:FadeSprite(0, 0.35, true)
	end

	method void FadeSprite(number targetAlpha, number duration, boolean isFadeOut)
		duration = duration or 0.35  -- 기본 0.35초
		
		local t, tick = 0, 1/60
		
		self.steps = math.ceil(duration / tick)
		self.timerStep = 0
		
		self.loadingTimer = _TimerService:SetTimerRepeat(function()
		    self.timerStep = self.timerStep + 1
			
		    local progress = math.min(self.timerStep / self.steps, 1.0)
			local sprite = self.loadingUI.SpriteGUIRendererComponent
			local slimeSprite = self.loadingUI.Children[1].SpriteGUIRendererComponent
			local loadingText = self.loadingUI.Children[2].TextComponent
			local startColor = sprite.Color
			local endColor = Color(startColor.r, startColor.g, startColor.b, targetAlpha)
			local startSlimeColor = slimeSprite.Color
			local endSlimeColor = Color(startSlimeColor.r, startSlimeColor.g, startSlimeColor.b, targetAlpha)
			local startTextColor = loadingText.FontColor
			local endTextColor = Color(startTextColor.r, startTextColor.g, startTextColor.b, targetAlpha)
			
		    sprite.Color = Color.Lerp(startColor, endColor, progress)
		    slimeSprite.Color = Color.Lerp(startSlimeColor, endSlimeColor, progress)
		    loadingText.FontColor = Color.Lerp(startTextColor, endTextColor, progress)
		
		    -- 마지막 스텝이면 보장 처리
		    if progress >= 1 then
		        sprite.Color = endColor
		        _TimerService:ClearTimer(self.loadingTimer)
		    end
		end, tick, 0)
		
		if isFadeOut then
			_TimerService:SetTimerOnce(function()
				self.loadingUI.Enable = false
				self.loadingUI.Visible = false
			end, self.steps * tick)
		end
	end

	method table GetPreLoadAssetRuid()
		local ruids = {}
		local playerDeck = _EntityService:GetEntityByTag("Player").UserDeck
		
		for i = 1, 8 do
			local unitData = _UnitService:GetUnitByIDFromServer(playerDeck.userDeck[i])
			local skillData = _SkillService:GetSkillByIDFromServer(unitData["skillID"])
			
			local ruidString = skillData["ruids"] or ""
		    
		    -- 쉼표로 분리된 string을 table로 변환
		    for ruid in string.gmatch(ruidString, "([^,]+)") do
		        table.insert(ruids, ruid)
		    end
		end
		
		return ruids
	end

	@ExecSpace("Client")
	method void LocalGameStart()
		local userStage = _UserService.LocalPlayer.UserStage
		if userStage.openChapter < userStage.selectChapter then
			return
		end
		
		if userStage.openChapter == userStage.selectChapter and userStage.openStage < userStage.selectStage then
			return
		end
		
		self:ShowLoadingScreen()
		
		local ruids = self:GetPreLoadAssetRuid()
		
		_ResourceService:PreloadAsync(ruids, function()
			_TimerService:ClearTimer(self.loadingTimer)
			
			_TeleportService:TeleportToMapPosition(_UserService.LocalPlayer, Vector3.zero, "Stage".. userStage.selectChapter.."0"..userStage.selectStage)
			self:GameStart(userStage.selectChapter, userStage.selectStage)
			self:HideLoadingScreen()
		end) 
	end

	@EventSender("Service", "InputService")
	handler HandleKeyDownEvent(KeyDownEvent event)
		--------------- Native Event Sender Info ----------------
		-- Sender: InputService
		-- Space: Client
		---------------------------------------------------------
		
		-- Parameters
		local key = event.key
		---------------------------------------------------------
		if key == KeyboardKey.C and Environment:IsMakerPlay() then
			self:OpenSkillSelect()
		end
		
		if event.key == KeyboardKey.G and Environment:IsMakerPlay() then
			self:StageClear()
		end
	end

end