@Component
script MonsterSpawnService extends Component

	property table loopGroup = {}

	property table eventGroup = {}

	property table timerIdList = {}

	property number curTimeTs = 0

	@ExecSpace("Server")
	method integer GroupSummon(table group)
		if group == nil then
			return
		end
		
		if #group == 0 then
			return
		end
		local value = group[1]
		
		log('summon ', value.unit)
		log('next summon delay', value.delayTs)
		_SpawnManager:SpawnEnemy(value.unit)
		
		table.remove(group, 1)
		
		self.timerIdList[#self.timerIdList + 1] = _TimerService:SetTimerOnce(
			function() self:GroupSummon(group) end,
			value.delayTs
		)
	end

	method void OnDamage()
		-- EVENT DAMAGED 시 호출되는 함수
		local damageList = self.eventGroup['DAMAGED']
		
		for i, g in ipairs(damageList) do
			if g.count >= g.maxCount then
				continue
			end
			
			local delayEndTs = g.lastTs + g.delayTs
			if self.curTimeTs < delayEndTs then
				continue
			end
			
			g.lastTs = self.curTimeTs
			g.count = g.count + 1
			
			
			local groupTable = {}
			for i, g in ipairs(g.group) do
				local value = {}
				value['unit'] = g.unit
				value['delayTs'] = g.delayTs
				
				table.insert(groupTable, value)
			end
		
			self.timerIdList[#self.timerIdList + 1] = _TimerService:SetTimerOnce(
				function() self:GroupSummon(groupTable) end,
				0
			)
		end
	end

	method void LoopGroupSummon(number group)
		local group_data = _groupRepo:GetGroupById(group)
		local groupTable = {}
		for i, g in ipairs(group_data) do
			local value = {}
			value['unit'] = g.unit
			value['delayTs'] = g.delayTs
			
			table.insert(groupTable, value)
		end
		
		log('book summon group = ', group)
		
		self.timerIdList[#self.timerIdList + 1] = _TimerService:SetTimerOnce(
			function() self:GroupSummon(groupTable) end,
			0
		)
	end

	@ExecSpace("ClientOnly")
	method void OnEndPlay()
		for i, id in ipairs(self.timerIdList) do
			_TimerService:ClearTimer(id)
		end
	end

	@ExecSpace("ClientOnly")
	method void OnUpdate(number delta)
		-- 
		if true then
			return
		end
		
		self.curTimeTs = self.curTimeTs + delta
		if self.curTimeTs > 3 then
			self:OnDamage()
		end
	end

	@ExecSpace("ClientOnly")
	method void OnMapEnter(Entity enteredMap)
		if enteredMap.Name ~= "Chapter1" then
			return
		end
		
		local settingFunction = function() 
			local patterns = _patternRepo:GetPatternByStage(1)
			self.curTimeTs = 0
		
			for i, pattern in ipairs(patterns) do
				if pattern.type == 'LOOP' then
					local setting = _settingRepo:GetSettingByTypeAndId('LOOP', pattern.setting)
				
					local id = _TimerService:SetTimerRepeat(
						function() 
							self:LoopGroupSummon(pattern.group)
						end, 
						setting.delayTs, 
						setting.startTs)
					self.timerIdList[#self.timerIdList + 1] = id
					self.timerIdList[#self.timerIdList + 1] = _TimerService:SetTimerOnce(
						function() 
							_TimerService:ClearTimer(id) 
						end,
						setting.endTs)
				end
			
				if pattern.type == 'EVENT' then
					local setting = _settingRepo:GetSettingByTypeAndId('EVENT', pattern.setting)
					local group_data = _groupRepo:GetGroupById(pattern.group)
				
					if self.eventGroup[setting.type] == nil then
						self.eventGroup[setting.type] = {}
					end
				
					local id = #self.eventGroup[setting.type] + 1
				
					local item = {}
					item['count'] = 0
					item['delayTs'] = setting.delayTs
					item['maxCount'] = setting.count
					item['lastTs'] = -1
					item['group'] = {}
				
					self.eventGroup[setting.type][id] = item
				
					for i, g in ipairs(group_data) do
						table.insert(self.eventGroup[setting.type][id].group, g)
					end
				end
			end
		end
		
		_TimerService:SetTimerOnce(settingFunction, 1)
	end

end