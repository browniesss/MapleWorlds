@Logic
script Utils extends Logic

	@Sync
	property number steps = 0

	@Sync
	property number timerStep = 0

	@Sync
	property number fadeInTimer = 0

	method number GetRUIDTime(string ruid)
		if _UtilLogic:IsNilorEmptyString(ruid) then
		    return 0
		end
		         
		local time = 0
		local clip = _ResourceService:LoadAnimationClipAndWait(ruid)
		if clip == nil then
		    return 0
		end
		
		for i = 1,#clip.Frames do
		    time = time + clip.Frames[i].Delay
		end
		 
		return time
	end

	method number GetSyncTableLength(SyncTable<Entity> syncTable)
		local length = 0
		    for _ in pairs(syncTable) do
		        length += 1
		    end
		 
		return length
	end

	method number GetSyncTableIndex(SyncTable<Entity> syncTable, Entity entity)
		for index in ipairs(syncTable) do
			if entity == syncTable[index] then
				return index
			end
		end
		
		return 1
	end

	method void FadeIn(Entity target, number duration)
		local canvas = target.CanvasGroupComponent
		duration = duration or 0.35  -- 기본 0.35초
		
		local t, tick = 0, 1/60
		
		self.steps = math.ceil(duration / tick)
		self.timerStep = 0
		
		if canvas == nil then 
			return 
		end
		    
		canvas.Enable = true
		canvas.GroupAlpha = 0
		
		self.fadeInTimer = _TimerService:SetTimerRepeat(function()
		    self.timerStep = self.timerStep + 1
		    local progress = math.min(self.timerStep / self.steps, 1.0)
		    canvas.GroupAlpha = progress
		
		    if t >= 1 then
		        _TimerService:ClearTimer(self.fadeInTimer)
		    end
		end, tick, 0)
	end

	method Vector2 GetImageSize(string spriteRUID)
		local sprite = _ResourceService:LoadSpriteAndWait(spriteRUID)
		local spriteSize = Vector2.zero
		
		if sprite.IsLoadComplete then
		    spriteSize.x = sprite.Width
			spriteSize.y = sprite.Height
			
			return spriteSize
		end
	end

end