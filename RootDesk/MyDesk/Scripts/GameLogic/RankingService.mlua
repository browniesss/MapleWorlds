@Logic
script RankingService extends Logic

	@Sync
	property SyncTable<string> RankData

	property any fetchCallback = nil

	property table rankList = {}

	@ExecSpace("Server")
	method void AddPoint(string storageKey, string userName, integer userScore)
		local ds = _DataStorageService:GetSortableDataStorage(storageKey)
		
		local getCode, lastScore = ds:GetAndWait(userName)
		if getCode ~= 0 then
			log("AddPoint get err: " .. getCode)
			return
		end
		
		if lastScore == nil or lastScore == 0 then
			lastScore = 9999999
		end
		
		if lastScore <= userScore then
			return
		end
		
		local setCode = ds:SetAndWait(userName, userScore)
		if setCode ~= 0 then
			log("AddPoint set err: " .. setCode)
		end
	end

	@ExecSpace("Server")
	method void FETCH(string storageKey)
		local ds = _DataStorageService:GetSortableDataStorage(storageKey)
		 
		-- 데이터들을 정렬된 순서로 가져옵니다.
		local errorCode, itemPages = ds:GetSortedAndWait(SortDirection.Ascending, 0, 9999999)
		if errorCode ~= 0 then
			log("fetch rank code:" .. errorCode)
			return
		end
		
		local rank = 1
		local rankList = {}
		while true do
		    -- GetCurrentPageDatas()로 현재 페이지의 목록을 가져올 수 있습니다.
		    local items = itemPages:GetCurrentPageDatas()
		    for _, item in pairs(items) do
		         -- SortableDataStorageItem을 통해 Key값과 Value값을 조회할 수 있습니다.
				self.RankData[rank] = _HttpService:JSONEncode({name=item.KeyInfo.Key, score=item.Value})
				log(rank .. " -> " .. item.KeyInfo.Key)
				rankList[#rankList + 1] = {name=item.KeyInfo.Key, score=item.Value}
				rank += 1
		    end
			
			if #rankList > 50 then
				break
			end
		     
		    -- IsLastPage 프로퍼티를 통해 현재 페이지가 마지막 페이지인지 확인할 수 있습니다.
		    if itemPages.IsLastPage == true then
		        break
		    end
		     
		    -- MoveToNextPageAndWait()로 다음 페이지로 넘어갈 수 있습니다.
		    itemPages:MoveToNextPageAndWait()
		end
		
		self:UpdateData(rankList)
	end

	method string GetRankKeyByTable(table data)
		local storageKey = "RANK"
		
		local keys = {}
		for key in pairs(data) do
			table.insert(keys, key)
		end
		
		table.sort(keys)
		
		for _, key in ipairs(keys) do
			storageKey = storageKey .. "_" .. string.upper(key) .. "_" .. string.upper(tostring(data[key]))
		end
		
		return storageKey
	end

	@ExecSpace("ClientOnly")
	method table GetTop3RankTable()
		local table = {}
		
		for rank = 1, 4 do
			if rank > #self.rankList then
				table[rank] = {name="NONE", score=9999999}
				continue
			end
			
			table[rank] = self.rankList[rank]
		end
		
		return table
	end

	@ExecSpace("ClientOnly")
	method table GetTop50RankTable()
		local table = {}
		
		for rank = 1, 50 do
			if rank > #self.rankList then
				table[rank] = {name="NONE", score=9999999}
				continue
			end
			
			table[rank] = self.rankList[rank]
		end
		
		return table
	end

	@ExecSpace("Client")
	method void RefreshRankListUI()
		self.fetchCallback()
	end

	@ExecSpace("ClientOnly")
	method void OnSyncProperty(string name, any value)
		--log("온싱크"..name.."밸류:"..tostring(value))
		--self.fetchCallback()
	end

	@ExecSpace("Server")
	method void DeleteData()
		--for i = 1, 50 do	
		--    self.RankData[i] = nil
		--end
	end

	@ExecSpace("Client")
	method void UpdateData(table list)
		if list == nil or #list == 0 then
			self.rankList = {}
			return
		end
		
		self.rankList = list
		self.fetchCallback()
	end

end