@Component
script UserStage extends Component

	@Sync
	property integer openStage = 1

	@Sync
	property integer openChapter = 1

	@Sync
	property integer selectStage = 1

	@Sync
	property integer selectChapter = 1

	property table updateList = {}

	@ExecSpace("Server")
	method integer SAVE()
		local data = {}
		
		data["openStage"] = self.openStage
		data["openChapter"] = self.openChapter
		data["selectStage"] = self.selectStage
		data["selectChapter"] = self.selectChapter
		
		local jsonData = _HttpService:JSONEncode(data)
		
		local userStorage = _DataStorageService:GetUserDataStorage(self.Entity.PlayerComponent.UserId)
		
		return userStorage:SetAndWait("stage", jsonData)
	end

	@ExecSpace("Server")
	method integer LOAD()
		local userStorage = _DataStorageService:GetUserDataStorage(self.Entity.PlayerComponent.UserId)
		
		local getErr, jsonData = userStorage:GetAndWait("stage")
		
		if getErr ~= 0 then
			return getErr
		end
		
		if jsonData == nil then
			return 100012
		end
		
		local data = _HttpService:JSONDecode(jsonData)
		
		self.openStage = tonumber(data["openStage"])
		self.openChapter = tonumber(data["openChapter"])
		self.selectStage = tonumber(data["selectStage"])
		self.selectChapter = tonumber(data["selectChapter"])
		
		return 0
	end

	@ExecSpace("ServerOnly")
	method void OnBeginPlay()
		if self:LOAD() ~= 0 then
			self.openStage = 1
			self.openChapter = 1
			self.selectStage = 1
			self.selectChapter = 1
			self:SAVE()
		end
	end

	@ExecSpace("Server")
	method void SetClearStage(integer selectChapter, integer selectStage)
		self.openChapter = selectChapter
		self.openStage = selectStage
		self.selectChapter = selectChapter
		self.selectStage = selectStage
		self:SAVE()
	end

	@ExecSpace("ClientOnly")
	method void OnSyncProperty(string name, any value)
		if name == "openStage" or name == "openChapter" or name == "selectStage" or name == "selectChapter" then
			local chapterData = _StageService:GetStageByChapter(self.openChapter)
			local lastStage = chapterData[#chapterData]
			
			if self.openStage > lastStage.stage then
				self.openStage = lastStage.stage
			end
			
			for i, cb in ipairs(self.updateList) do
				cb()
			end
		end
	end

	method boolean isLastStageSelected()
		if self.openChapter ~= self.selectChapter then
			return false
		end
		
		if self.openStage ~= self.selectStage then
			return false
		end
		
		return true
	end

end