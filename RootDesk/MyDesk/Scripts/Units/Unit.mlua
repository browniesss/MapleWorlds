@Component
script Unit extends Component

	@Sync
	property Entity curTarget = nil

	@Sync
	property Entity passiveSkill = nil

	@Sync
	property number moveSpeed = 1

	@Sync
	property number maxHP = 0

	@Sync
	property number hp = 100

	@Sync
	property number originMaxHP = 0

	@Sync
	property number maxMP = 0

	@Sync
	property number mp = 0

	@Sync
	property number damage = 10

	@Sync
	property number attackRange = 1

	@Sync
	property number attackSpeed = 1.5

	@Sync
	property number originAttackSpeed = 0

	@Sync
	property number AttackTimer = 0

	@Sync
	property string curState = "stand"

	@Sync
	property boolean isEnemy = false

	@Sync
	property number projectileSpeed = 0.20

	@Sync
	property number attackTiming = 0.9

	property string attackAnimationRUID = ""

	@Sync
	property number attackAnimationPlayingTime = 0

	@Sync
	property number dieAnimationPlayingTime = 0

	@Sync
	property Vector2 imageSize = Vector2(0,0)

	@Sync
	property Entity activeSkill = nil

	@Sync
	property string skillID = ""

	@Sync
	property string skillDesc = ""

	@Sync
	property number skillArea = 0

	@Sync
	property number skillAmount = 0

	@Sync
	property number skillProjectileSpeed = 0

	@Sync
	property number skillTime = 0

	@Sync
	property number skillAttackTiming = 0

	@Sync
	property boolean isUsingSkill = false

	@TargetUserSync
	property Vector3 originPos = Vector3(0,0,0)

	@Sync
	property string unitName = ""

	@Sync
	property boolean isSpawnEnd = false

	@Sync
	property string projectileSpriteRUID = ""

	@Sync
	property integer currentTimerID = 0

	@Sync
	property boolean isUsableCharacter = false

	@Sync
	property string animationName = ""

	@ExecSpace("Server")
	method void Spawn(table unitData, table skillData)
		self.moveSpeed = unitData["moveSpeed"]
		self.hp = unitData["hp"]
		self.maxHP = unitData["hp"]
		self.originMaxHP = unitData["hp"]
		self.damage = unitData["damage"]
		self.attackRange = unitData["attackRange"]
		self.attackSpeed = unitData["attackSpeed"]
		self.originAttackSpeed = unitData["attackSpeed"]
		self.projectileSpeed = unitData["projectileSpeed"]
		self.attackTiming = unitData["attackTiming"]
		self.maxMP = unitData["maxMp"]
		self.mp = unitData["startMp"]
		self.damage = unitData["damage"]
		self.projectileSpriteRUID = unitData["projectileSpriteRUID"]
		self.unitName = unitData["name"]
		self.animationName = unitData["animationName"]
		local isUsableCharacter = unitData["isUsableCharacter"]
		self.isUsableCharacter = isUsableCharacter == 1
		
		self.skillID = skillData['id']
		self.skillDesc = skillData['desc']
		self.skillArea = skillData['skillArea']
		self.skillAmount = skillData['skillAmount']
		self.skillProjectileSpeed = skillData['skillProjectileSpeed'] 
		self.skillTime = skillData['skillTime']
		self.skillAttackTiming = skillData['skillAttackTiming']
		
		self:InitTagData()
		self:InitData()
		self:InitSkillData()
		self:InitAnimData()
		self:CreateMinimapIcon(false)
	end

	method void InitTagData()
		self.Entity:AddComponent(TagComponent)
		self.Entity.TagComponent:AddTag("MyMonster")
		
		if self.Entity.TagComponent.Tags.Count <= 0 then
			return
		end
		
		if self.Entity.TagComponent.Tags[1] == "Enemy" then
			self.isEnemy = true;	
		end
		
		if self.isUsableCharacter == false then
			if self.isEnemy then
				self.Entity.SpriteRendererComponent.FlipX = false
			else
				self.Entity.SpriteRendererComponent.FlipX = true
			end
		else
			self.Entity.AvatarRendererComponent.ShowDefaultWeaponEffects = false
			
			if self.isEnemy then
				self.Entity.TransformComponent.Rotation = Vector3(0, 0, 0)
			else
				self.Entity.TransformComponent.Rotation = Vector3(0, 180, 0)
			end
		end
	end

	@ExecSpace("Server")
	method void InitAnimData()
		self.Entity.StateComponent:AddState("attack", Attack)
		self.Entity.StateComponent:AddState("stand", Stand)
		self.Entity.StateComponent:AddState("move", Move)
		self.Entity.StateComponent:AddState("die", Die)
		self.Entity.StateComponent:AddState("useSkill", UseSkill)
		
		if self.isUsableCharacter == false then
			-- 공격 애니메이션 플레잉타임 가져오기
			if self.Entity.StateAnimationComponent.ActionSheet:ContainsKey("attack") then
				self.attackAnimationRUID = self.Entity.StateAnimationComponent.ActionSheet["attack"]
				self.attackAnimationPlayingTime = _Utils:GetRUIDTime(self.attackAnimationRUID)
			end
			-- 죽음 애니메이션 플레잉타임 가져오기
			if self.Entity.StateAnimationComponent.ActionSheet:ContainsKey("die") then
				local dieAnimationRUID = self.Entity.StateAnimationComponent.ActionSheet["die"]
				self.dieAnimationPlayingTime = _Utils:GetRUIDTime(dieAnimationRUID)
			end
		end
		
		
		if self.isEnemy then
			-- 빨간 데미지 스킨
			self.Entity.DamageSkinSettingComponent.DamageSkinId = "7e39645af9454fffb17a5451e9194dda"
		else
			-- 파란 데미지 스킨
			self.Entity.DamageSkinSettingComponent.DamageSkinId = "436ac27fca8c448ba4bcd31bbed3ba15"
		end
		
		self.isSpawnEnd = true
	end

	method void InitData()
		if self.passiveSkill ~= nil and self.passiveSkill.PassiveSkillParent.passiveType == _ePassiveType.OnStart then
			self.passiveSkill.PassiveSkillParent:OnStart()
		end
		
		self.Entity:AddComponent(HitComponent)
		
		if self.isUsableCharacter then
			self.imageSize = Vector2.one * 0.5
			return
		end
		
		_ResourceService:PreloadAsync({self.Entity.SpriteRendererComponent.SpriteRUID},
		function() 
			local clip = _ResourceService:LoadAnimationClipAndWait(self.Entity.SpriteRendererComponent.SpriteRUID)
		    local firstFrameSprite = clip.Frames[1].FrameSprite
			local pixelPerUnit = firstFrameSprite.PixelPerUnit
		    self.imageSize= Vector2(firstFrameSprite.Width / pixelPerUnit, firstFrameSprite.Height / pixelPerUnit)
		end)
		
	end

	@ExecSpace("Server")
	method void InitSkillData()
		self.activeSkill = _SpawnService:SpawnByModelId(self.skillID, self.skillDesc, Vector3.zero, self.Entity)
	end

	@ExecSpace("ClientOnly")
	method void OnUpdate(number delta)
		if self.isSpawnEnd == false then
			return
		end
		
		log("이름 : "..self.unitName.."   스테이트:"..self.curState)
		
		if self.curState == "stand" and self.curTarget == nil then
			self:FindTarget()
		elseif self.curState == "move" then
			self:MoveToTarget(delta)
			self:FindTarget()
		elseif self.curState == "attack" then
			self:Attack(delta)
		elseif self.curState == "useSkill" then
			self:UseSkill()
		elseif self.curState == "die" then
			
		end
	end

	@ExecSpace("Client")
	method void FindTarget()
		local myPos = self.Entity.TransformComponent.WorldPosition
		local nearestEnemy = nil
		local nearestDistance = math.huge
		if self.curState == "attack" or self.curState == "die" then
			return
		end
		
		local enemies
		
		if self.isEnemy then
			enemies = _EntityService:GetEntitiesByTag("MyMonster")
		else 
			enemies = _EntityService:GetEntitiesByTag("Enemy")
		end
		
		for _, enemy in ipairs(enemies) do
			local enemyPos = enemy.TransformComponent.WorldPosition
			local distance = math.abs((enemyPos - myPos).x)
			
			if distance < nearestDistance and enemy.Unit.curState ~= "die" then
				nearestEnemy = enemy
				nearestDistance = distance
			end
		end
		
		if nearestEnemy ~= nil and nearestEnemy ~= self.curTarget then
			self.curTarget = nearestEnemy;
		
			if self:GetDistance() <= self.attackRange then
				self:SetState("attack")
				self:SetAnimationState("stand")
			else
				self:SetState("move")
			end
		end
	end

	@ExecSpace("Client")
	method void MoveToTarget(number delta)
		if self.curTarget == nil or not isvalid(self.curTarget) then
			self:SetState("stand")
			return
		end
		
		if self:GetDistance() <= self.attackRange then
			self:SetState("attack")
			self:SetAnimationState("stand")
			return
		end
		
		self:Move(delta)
		self:SetState("move")
	end

	@ExecSpace("Client")
	method number GetDistance()
		if not isvalid(self.curTarget) then
			self:SetState("stand")
			log("리턴")
			-- 여기가 문제가 아님
			return -1
		end
		
		local myPos = self.Entity.TransformComponent.WorldPosition
		local targetPos = Vector3.zero
		
		if (self.curTarget.StateAnimationComponent == nil or self.curTarget.StateAnimationComponent.ActionSheet:ContainsKey("attack") == false) 
			and self.curTarget.Unit.attackRange == 1 and self.curTarget.Unit.originPos ~= Vector3.zero then
			targetPos = self.curTarget.Unit.originPos
		else
			targetPos = self.curTarget.TransformComponent.WorldPosition
		end
		
		return math.abs(targetPos.x - myPos.x)
	end

	@ExecSpace("Client")
	method void Move(number delta)
		if self.curTarget == nil then
			return
		end
		
		local myPos = self.Entity.TransformComponent.WorldPosition
		local targetPos = self.curTarget.TransformComponent.WorldPosition
		
		local direction = Vector2(targetPos.x - myPos.x, 0):Normalize()
		local newX = myPos.x + (direction.x * self.moveSpeed * delta)
		
		-- 기존의 Y 좌표는 유지
		self.Entity.TransformComponent.WorldPosition = Vector3(newX, myPos.y, myPos.z)
		self.originPos = self.Entity.TransformComponent.WorldPosition
	end

	@ExecSpace("Client")
	method void Attack(number delta)
		if self.curTarget == nil or self:GetDistance() > self.attackRange then
			self:SetState("stand")
			self.curTarget = nil
			return
		end
		
		self.AttackTimer += delta;
		
		if self.AttackTimer >= self.attackSpeed and self.attackRange == 1 then
			self:Melee_Attack()
			self.AttackTimer = 0
		elseif self.AttackTimer >= self.attackSpeed and self.attackRange > 1 then
			self:Range_Attack()
			self.AttackTimer = 0
		end
	end

	@ExecSpace("Client")
	method void Melee_Attack()
		if self.curState ~= "attack" then
			return
		end
		
		if (self.isUsableCharacter == false and self.Entity.StateAnimationComponent.ActionSheet:ContainsKey("attack") == false)
			and self.Entity.TweenLineComponent.CurrentState ~= TweenState.Playing then
			self.originPos = self.Entity.TransformComponent.WorldPosition
			self:PlayTween()
			self:Attack_Damage()
			self:PlayEffect("a05c1966e31a4c409cc263215f786d2e", Vector3(-0.5,0,0))
		else
			self:SetState("attack")
			
			-- 유저형의 캐릭터일 경우 
			if self.isUsableCharacter then
				local animationPlayTime = _DataManager:GetMotionDuration(self.animationName)
				local animationPlaySpeed = animationPlayTime / (self.attackSpeed - 0.1)
		
				self.Entity.AvatarAnimationComponent:PlayOnce(self.animationName, animationPlaySpeed, function()
					if self.curState == "die" then
						return
					end
					
					self:SetAnimationState("stand")
					self.Entity.AvatarRendererComponent.PlayRate = 1
		
					-- 마나 충전
					self:IncreaseMp()
				end)
				
				local attackFunction = function()
					if self.curState == "die" then
						return
					end
					
					self:Attack_Damage()
				
					if self.passiveSkill ~= nil and self.passiveSkill.PassiveSkillParent.passiveType == _ePassiveType.OnAttack then
						self.passiveSkill.PassiveSkillParent:OnAttack()
					end
				end
				
				local timerTiming = self.attackTiming / animationPlaySpeed
				if timerTiming < 0 then
					timerTiming = 0.5
				end
				
				_TimerService:SetTimerOnce(attackFunction, timerTiming)
			else
				local animationPlaySpeed = self.attackAnimationPlayingTime / (self.attackSpeed - 0.1)
				self.Entity.SpriteRendererComponent.PlayRate = animationPlaySpeed
				
				local attackFunction = function() 
					if self.curState == "die" then
						return
					end
		
					self:Attack_Damage()
					
					if self.passiveSkill ~= nil and self.passiveSkill.PassiveSkillParent.passiveType == _ePassiveType.OnAttack then
						self.passiveSkill.PassiveSkillParent:OnAttack()
					end
			
					-- 마나 충전
					self:IncreaseMp()
				end
				 
				local timerTiming = self.attackTiming / animationPlaySpeed
				if timerTiming < 0 then
					timerTiming = 0.5
				end
				
				_TimerService:SetTimerOnce(attackFunction, timerTiming)
			end
		end
	end

	@ExecSpace("Client")
	method void Range_Attack()
		if self.curState ~= "attack" then
			return
		end
		
		self:SetState("attack")
		
		if self._T.projectileParent == nil then
			self._T.projectileParent = _EntityService:GetEntityByPath(_GameManager:GetGameMapName().."/ProjectileParent")
		end
		
		if self.isUsableCharacter then
			local animationPlayTime = _DataManager:GetMotionDuration(self.animationName)
			local animationPlaySpeed = animationPlayTime / (self.attackSpeed - 0.1)
				
			self.Entity.AvatarAnimationComponent:PlayOnce(self.animationName, animationPlaySpeed, function()
				if self.curState == "die" then
					return
				end
				
				self:SetAnimationState("stand")
				self.Entity.AvatarRendererComponent.PlayRate = 1
		
				self:IncreaseMp()
			end)
			
			local attackFunction = function()
				if self.curState == "die" then
					return
				end
		
				local projectile = _SpawnService:SpawnByModelId("model://cd38ad89-1c52-45f2-8d86-d6be27475ba9",
					"Projectile",
					self.Entity.TransformComponent.WorldPosition + (Vector3.up * 0.3),
					self._T.projectileParent)
				projectile.Projectile:SetCaster(self.Entity)
		
				if self.passiveSkill ~= nil and self.passiveSkill.PassiveSkillParent.passiveType == _ePassiveType.OnAttack then
					self.passiveSkill.PassiveSkillParent:OnAttack()
				end
		
				projectile.Projectile:SetShoot(self.projectileSpriteRUID, 1, self.projectileSpeed, self.curTarget, true,self.damage)
			end
			
			local timerTiming = self.attackTiming / animationPlaySpeed
			if timerTiming < 0 then
				timerTiming = 0.5
			end
			
			_TimerService:SetTimerOnce(attackFunction, timerTiming)
		else
			local projectile = _SpawnService:SpawnByModelId("model://cd38ad89-1c52-45f2-8d86-d6be27475ba9",
					"Projectile",
					self.Entity.TransformComponent.WorldPosition + (Vector3.up * 0.3),
					self._T.projectileParent)
				projectile.Projectile:SetCaster(self.Entity)
		
			if self.passiveSkill ~= nil and self.passiveSkill.PassiveSkillParent.passiveType == _ePassiveType.OnAttack then
				self.passiveSkill.PassiveSkillParent:OnAttack()
			end
		
			projectile.Projectile:SetShoot(self.projectileSpriteRUID, 1, self.projectileSpeed, self.curTarget, true,self.damage)
				
				-- 마나 충전
			self:IncreaseMp()
		end
	end

	@ExecSpace("Client")
	method void PlayTween()
		local tween = self.Entity.TweenLineComponent
		
		-- 트윈 설정
		local tweenDir = 0
		if self.isEnemy then
			tweenDir = -1
		else
			tweenDir = 1	
		end
		
		tween.DestinationCoordinateType = CoordinateType.Absolute
		tween.Positions = { Vector2(self.Entity.TransformComponent.WorldPosition.x + tweenDir, self.Entity.TransformComponent.WorldPosition.y) }
		tween.Duration = 0.1 -- 이동 시간 설정
		tween.UseReturnTweenType = true -- 반환 동작 설정
		tween.ReturnDuration = 0.1 -- 돌아올 때의 이동 시간 설정
		tween.ReturnTweenType = EaseType.Linear -- 되돌아올 때 보간 설정
		
		-- 트윈 시작
		tween:RestartFromCurrentPosition()
		
		local increaseMPFunction = function()
			if self.curState == "die" then
				return
			end
			-- 마나 충전
			self:IncreaseMp()	
		end
		
		_TimerService:SetTimerOnce(increaseMPFunction, 0.2)
	end

	@ExecSpace("Client")
	method void Attack_Damage()
		self.curTarget.Unit:OnHit(self.Entity, self.damage, false, 1)
	end

	@ExecSpace("Client")
	method void PlayEffect(string effect, Vector3 pos)
		_EffectService:PlayEffectAttached(effect, self.Entity, pos, 0, Vector3.one)
	end

	@ExecSpace("Client")
	method void SetState(string state)
		if self.curState == "die" then
			return
		end
		
		self.curState = state
		
		if (self.isUsableCharacter == false and self.Entity.StateAnimationComponent.ActionSheet:ContainsKey(state:lower()) == false) then
			return
		end
		
		log(self.unitName.."애니메이션"..state)
		self:SetAnimationState(state)
	end

	@ExecSpace("Server")
	method void SetAnimationState(string state)
		self.Entity.StateComponent:ChangeState(state)
	end

	@ExecSpace("Client")
	method void GetBuff(number buffType, number buffAmount, number buffTime)
		local deleteFunction
		
		if buffType == _eBuffType.AttackSpeedBuff then
			if self.attackSpeed - buffAmount <= 0.5 then
				self.attackSpeed = 0.5
			else
				self.attackSpeed -= buffAmount
			end
			
			if self.currentTimerID ~= 0 then
				_TimerService:ClearTimer(self.currentTimerID)
			end
			
			if buffTime ~= 0 then
				deleteFunction = function()
					self.currentTimerID = 0
					self.attackSpeed = self.originAttackSpeed
				end
		
				self.currentTimerID = _TimerService:SetTimerOnce(deleteFunction, buffTime) 
			end
		elseif buffType == _eBuffType.MaxHealthMultiplyBuff then
			local addHP = self.maxHP * buffAmount - self.maxHP
			
			self.maxHP = self.maxHP * buffAmount
			self.hp += addHP
		
			if self.currentTimerID ~= 0 then
				_TimerService:ClearTimer(self.currentTimerID)
			end
			
			if buffTime ~= 0 then
				deleteFunction = function()
					self.currentTimerID = 0
					self.maxHP = self.originMaxHP
					
					if self.hp >= self.maxHP then
						self.hp = self.maxHP
					end
				end
		
				self.currentTimerID = _TimerService:SetTimerOnce(deleteFunction, buffTime) 
			end
		end
	end

	method void OnHit(Entity attacker, number damage, boolean isCritical, number attackCount)
		if self.hp <= 0 then
			return
		end
		
		log("맞음"..self.Entity.Name)
		self.Entity.HitComponent:OnHit(attacker, damage, isCritical, "", attackCount)
		self.hp -= damage
		
		if self.hp <= 0 then
			self:OnDie(attacker)
		end
	end

	method void OnDie(Entity attacker)
		if self.curState == "die" then
			return
		end
		
		self:SetState("die")
		self:ClearSkill()
		
		-- 맵마다 Path 다르게 설정 필요
		local map = _EntityService:GetEntityByPath(_GameManager:GetGameMapName())
		map.MinimapManager:RemoveEntityList(self.Entity)
		
		self:DestroyProjectile()
		self:ClearAttackerInfo()
		
		-- 죽는 애니메이션이 없는 경우 직접 처리
		if self.dieAnimationPlayingTime == 0 then
			self:DestroyAction()
		end
		
		-- 어태커의 타겟 엔티티 제거
		if attacker.PlayerCharacter ~= nil then
			return
		elseif attacker.Unit ~= nil then
			-- attacker.Unit.curTarget = nil
		else
			-- attacker.Projectile.caster.Unit.curTarget = nil
		end
	end

	method void IncreaseMp()
		if self.curState == "useSkill" then
			return
		end
		
		self.mp += 5
		
		if self.mp < self.maxMP then
			return
		end
		
		self:SetState("useSkill")
	end

	method void UseSkill()
		if self.mp == 0 or self.curState ~= "useSkill" or self.isUsingSkill or self.activeSkill == nil and self.Entity.StateComponent.CurrentStateName ~= "stand" then
			return
		end
		
		self.mp = 0
		self.isUsingSkill = true
		
		self.activeSkill.SkillParent:UseSkill(self.Entity, self.curTarget, self.skillArea, self.skillAmount, self.skillProjectileSpeed, self.skillTime, self.skillAttackTiming)
	end

	method void SpawnEnemy(table unitData, table skillData)
		self.moveSpeed = unitData["moveSpeed"]
		self.hp = unitData["hp"]
		self.maxHP = unitData["hp"]
		self.originMaxHP = unitData["hp"]
		self.damage = unitData["damage"]
		self.attackRange = unitData["attackRange"]
		self.attackSpeed = unitData["attackSpeed"]
		self.originAttackSpeed = unitData["attackSpeed"]
		self.projectileSpeed = unitData["projectileSpeed"]
		self.attackTiming = unitData["attackTiming"]
		self.maxMP = unitData["maxMp"]
		self.mp = unitData["startMp"]
		self.damage = unitData["damage"]
		self.projectileSpriteRUID = unitData["projectileSpriteRUID"]
		self.unitName = unitData["name"]
		self.animationName = unitData["animationName"]
		local isUsableCharacter = unitData["isUsableCharacter"]
		self.isUsableCharacter = isUsableCharacter == 1
		
		self.skillID = skillData['id']
		self.skillDesc = skillData['desc']
		self.skillArea = skillData['skillArea']
		self.skillAmount = skillData['skillAmount']
		self.skillProjectileSpeed = skillData['skillProjectileSpeed'] 
		self.skillTime = skillData['skillTime']
		self.skillAttackTiming = skillData['skillAttackTiming']
		
		self:InitEnemyTagData()
		self:InitData()
		self:InitSkillData()
		self:InitAnimData()
		self:CreateMinimapIcon(true)
	end

	method void InitEnemyTagData()
		self.Entity:AddComponent(TagComponent)
		self.Entity.TagComponent:AddTag("Enemy")
		
		if self.Entity.TagComponent.Tags.Count <= 0 then
			return
		end
		
		if self.Entity.TagComponent.Tags[1] == "Enemy" then
			self.isEnemy = true;	
		end
		
		if self.isUsableCharacter == false then
			if self.isEnemy then
				self.Entity.SpriteRendererComponent.FlipX = false
			else
				self.Entity.SpriteRendererComponent.FlipX = true
			end
		else
			if self.isEnemy then
				self.Entity.TransformComponent.Scale.x = 1
			else
				self.Entity.TransformComponent.Scale.x = -1
			end
		end
	end

	@ExecSpace("Server")
	method void DestroyAction()
		if self.isUsableCharacter then
			local destroyFunction = function()
				self.Entity:Destroy()
			end
			
			_TimerService:SetTimerOnce(destroyFunction, 5)
		else
			local spriteRenderer = self.Entity.SpriteRendererComponent
			local tween -- tweener를 할당할 변수 미리 선언
			local tweenAlpha = function(tweenValue)
				if isvalid(spriteRenderer) == false then
			        tween:Destroy()
			    end
			    spriteRenderer.Color.a = tweenValue
			end
			local dieAlphaTweenTime = 0.5
			
			if self.dieAnimationPlayingTime > 0 then
				dieAlphaTweenTime = self.dieAnimationPlayingTime
			end
			
			tween = _TweenLogic:MakeTween(spriteRenderer.Color.a, 0, dieAlphaTweenTime * 0.5, EaseType.Linear, tweenAlpha)
			tween.LoopCount = 0
			tween.AutoDestroy = false
			tween:Play()
			
			local destroyFunction = function()
				self.Entity:Destroy()
			end
			
			_TimerService:SetTimerOnce(destroyFunction, dieAlphaTweenTime * 0.5)	
		end
	end

	@ExecSpace("Client")
	method void DestroyProjectile()
		-- 자신의 발사체를 모두 제거
		local projectiles = _EntityService:GetEntityByPath(_GameManager:GetGameMapName()..'/ProjectileParent').Children
		
		for index, projectile in pairs(projectiles) do
			local data = projectile.Projectile
			
			if data ~= nil and (data.caster == self.Entity or not isvalid(data.caster)) then
				projectile:Destroy()
			end
		end
	end

	@ExecSpace("Server")
	method void ClearAttackerInfo()
		-- 해당 Entity를 타겟으로 하는 적들의 정보 초기화
		local entities
		
		if self.isEnemy then
			entities = _EntityService:GetEntityByPath(_GameManager:GetGameMapName()..'/MyMonsterList').Children
		else
			entities = _EntityService:GetEntityByPath(_GameManager:GetGameMapName()..'/EnemyList').Children
		end
		
		for index in ipairs(entities) do
			local entity = entities[index]
			
			if entity.Name == "MySpawnPoint" or entity.Name == "EnemySpawnPoint" then
				continue
			end
			
			self:ClearAttackerInfoInClient(entity.Id)
		end
	end

	@ExecSpace("Client")
	method void ClearAttackerInfoInClient(string id)
		local entity = _EntityService:GetEntity(id)
		
		if isvalid(entity) and entity.Unit.curTarget ~= nil and entity.Unit.curTarget == self.Entity then
			entity.Unit.curTarget = nil
			if entity.Unit.curState ~= "useSkill" then
				entity.Unit:SetState("stand")
				entity.Unit.AttackTimer = 0
				log("잉잉")
				
				if entity.Unit.isUsableCharacter then
					entity.AvatarRendererComponent.PlayRate = 1
				else
					entity.SpriteRendererComponent.PlayRate = 1
				end
			end
		end
	end

	@ExecSpace("Client")
	method void CreateMinimapIcon(boolean isEnemy)
		local map = _EntityService:GetEntityByPath('/maps/Chapter1')
		map.MinimapManager:AddEntityList(self.Entity, isEnemy)
	end

	@ExecSpace("Server")
	method void ClearSkill()
		-- 스킬 엔티티 제거
		for i = 1, self.Entity.Children.Count do
		    local child = self.Entity.Children[i]
		    if child.SkillParent ~= nil then
		        child:Destroy()
		        break
		    end
		end
	end

	method Vector3 GetTargetingPos()
		if self.isUsableCharacter then
			return Vector3(0, 0.3, 0)
		else
			return Vector3(self.imageSize.x * 0.5, self.imageSize.y * 0.5, 0)
		end
	end

	@EventSender("Self")
	handler HandleSpriteAnimPlayerEndFrameEvent(SpriteAnimPlayerEndFrameEvent event)
		--------------- Native Event Sender Info ----------------
		-- Sender: ClimbableSpriteRendererComponent
		-- Space: Client
		---------------------------------------------------------
		-- Sender: SpriteRendererComponent
		-- Space: Client
		---------------------------------------------------------
		
		-- Parameters
		-- local FrameIndex = event.FrameIndex
		-- local ReversePlaying = event.ReversePlaying
		-- local TotalFrameCount = event.TotalFrameCount
		-- local AnimPlayer = event.AnimPlayer
		---------------------------------------------------------
		if self.curState == "attack" then
			self:SetAnimationState("stand")
			self.Entity.SpriteRendererComponent.PlayRate = 1
		end
		
		if self.curState == "die" then
			self:DestroyAction()
		end
	end

end