@Component
script Unit extends Component

	@Sync
	property Entity curTarget = nil

	@Sync
	property Entity passiveSkill = nil

	@Sync
	property number moveSpeed = 1

	@Sync
	property number maxHP = 0

	@Sync
	property number hp = 100

	@Sync
	property number maxMP = 0

	@Sync
	property number mp = 0

	@Sync
	property number damage = 10

	@Sync
	property number attackRange = 1

	@Sync
	property number attackSpeed = 1.5

	@Sync
	property number originAttackSpeed = 0

	@Sync
	property number AttackTimer = 0

	@Sync
	property string curState = "stand"

	@Sync
	property boolean isEnemy = false

	@Sync
	property number projectileSpeed = 0.20

	@Sync
	property number attackTiming = 0.9

	property string attackAnimationRUID = ""

	property number attackAnimationPlayingTime = 0

	property Vector2 imageSize = Vector2(0,0)

	@Sync
	property Entity activeSkill = nil

	@Sync
	property string skillID = ""

	@Sync
	property string skillDesc = ""

	@Sync
	property number skillArea = 0

	@Sync
	property number skillAmount = 0

	@Sync
	property number skillProjectileSpeed = 0

	@Sync
	property number skillTime = 0

	@Sync
	property number skillAttackTiming = 0

	@Sync
	property boolean isUsingSkill = false

	@Sync
	property Vector3 originPos = Vector3(0,0,0)

	@Sync
	property string unitName = ""

	@ExecSpace("Server")
	method void Spawn(table unitData, table skillData)
		self.moveSpeed = unitData["moveSpeed"]
		self.hp = unitData["hp"]
		self.maxHP = unitData["hp"]
		self.damage = unitData["damage"]
		self.attackRange = unitData["attackRange"]
		self.attackSpeed = unitData["attackSpeed"]
		self.originAttackSpeed = unitData["attackSpeed"]
		self.projectileSpeed = unitData["projectileSpeed"]
		self.attackTiming = unitData["attackTiming"]
		self.maxMP = unitData["maxMp"]
		self.mp = unitData["startMp"]
		self.damage = unitData["damage"]
		self.unitName = unitData["name"]
		
		self.skillID = skillData['id']
		self.skillDesc = skillData['desc']
		self.skillArea = skillData['skillArea']
		self.skillAmount = skillData['skillAmount']
		self.skillProjectileSpeed = skillData['skillProjectileSpeed'] 
		self.skillTime = skillData['skillTime']
		self.skillAttackTiming = skillData['skillAttackTiming']
		
		self:InitTagData()
		self:InitData()
		self:InitSkillData()
		self:InitAnimData()
	end

	method void InitTagData()
		self.Entity:AddComponent(TagComponent)
		self.Entity.TagComponent:AddTag("MyMonster")
		
		if self.Entity.TagComponent.Tags.Count <= 0 then
			return
		end
		
		if self.Entity.TagComponent.Tags[1] == "Enemy" then
			self.isEnemy = true;	
		end
		
		if self.isEnemy then
			self.Entity.SpriteRendererComponent.FlipX = false
		else
			self.Entity.SpriteRendererComponent.FlipX = true
		end
	end

	method void InitAnimData()
		self.Entity.StateComponent:AddState("attack", Attack)
		self.Entity.StateComponent:AddState("stand", Stand)
		self.Entity.StateComponent:AddState("move", Move)
		self.Entity.StateComponent:AddState("die", Die)
		
		if self.Entity.StateAnimationComponent.ActionSheet:ContainsKey("attack") then
			self.attackAnimationRUID = self.Entity.StateAnimationComponent.ActionSheet["attack"]
			self.attackAnimationPlayingTime = _Utils:GetRUIDTime(self.attackAnimationRUID)
		end
		
		if self.isEnemy then
			-- 빨간 데미지 스킨
			self.Entity.DamageSkinSettingComponent.DamageSkinId = "7e39645af9454fffb17a5451e9194dda"
		else
			-- 파란 데미지 스킨
			self.Entity.DamageSkinSettingComponent.DamageSkinId = "436ac27fca8c448ba4bcd31bbed3ba15"
		end
	end

	method void InitData()
		_ResourceService:PreloadAsync({self.Entity.SpriteRendererComponent.SpriteRUID},
		function() 
			local clip = _ResourceService:LoadAnimationClipAndWait(self.Entity.SpriteRendererComponent.SpriteRUID)
		    local firstFrameSprite = clip.Frames[1].FrameSprite
			local pixelPerUnit = firstFrameSprite.PixelPerUnit
		    self.imageSize= Vector2(firstFrameSprite.Width / pixelPerUnit, firstFrameSprite.Height / pixelPerUnit)
		end)
		
		if self.passiveSkill ~= nil and self.passiveSkill.PassiveSkillParent.passiveType == _ePassiveType.OnStart then
			self.passiveSkill.PassiveSkillParent:OnStart()
		end
		
		self.Entity:AddComponent(HitComponent)
	end

	@ExecSpace("Server")
	method void InitSkillData()
		self.activeSkill = _SpawnService:SpawnByModelId(self.skillID, self.skillDesc, Vector3.zero, self.Entity)
	end

	@ExecSpace("ClientOnly")
	method void OnUpdate(number delta)
		if self.curState == "stand" and self.curTarget == nil then
			self:FindTarget()
		elseif self.curState == "move" then
			self:MoveToTarget(delta)
			self:FindTarget()
		elseif self.curState == "attack" then
			self:Attack(delta)
		elseif self.curState == "useSkill" then
			self:UseSkill()
		elseif self.curState == "die" then
			
		end
	end

	@ExecSpace("Client")
	method void FindTarget()
		local myPos = self.Entity.TransformComponent.WorldPosition
		local nearestEnemy = nil
		local nearestDistance = math.huge
		
		if self.curState == "attack" or self.curState == "die" then
			return
		end
		
		local enemies
		
		if self.isEnemy then
			enemies = _EntityService:GetEntitiesByTag("MyMonster")
		else 
			enemies = _EntityService:GetEntitiesByTag("Enemy")
		end
		
		for _, enemy in ipairs(enemies) do
			local enemyPos = enemy.TransformComponent.WorldPosition
			local distance = math.abs((enemyPos - myPos).x)
			
			if distance < nearestDistance then
				nearestEnemy = enemy
				nearestDistance = distance
			end
		end
		
		if nearestEnemy ~= nil and nearestEnemy ~= self.curTarget then
			self.curTarget = nearestEnemy;
			self:SetState("move")
		end
	end

	@ExecSpace("Client")
	method void MoveToTarget(number delta)
		self:Move(delta)
		self:SetState("move")
		
		if self:GetDistance() <= self.attackRange then
			self.curState = "attack"
			self:SetAnimationState("stand")
		end
	end

	@ExecSpace("Client")
	method number GetDistance()
		local myPos = self.Entity.TransformComponent.WorldPosition
		local targetPos = Vector3.zero
		
		if (self.curTarget.StateAnimationComponent ~= nil or self.curTarget.StateAnimationComponent.ActionSheet:ContainsKey("attack") == false) 
			and self.curTarget.Unit.attackRange == 1 and self.curTarget.Unit.originPos ~= Vector3.zero then
			targetPos = self.curTarget.Unit.originPos
		else
			targetPos = self.curTarget.TransformComponent.WorldPosition
		end
		
		return math.abs(targetPos.x - myPos.x)
	end

	@ExecSpace("Client")
	method void Move(number delta)
		if self.curTarget == nil then
			return
		end
		
		local myPos = self.Entity.TransformComponent.WorldPosition
		local targetPos = self.curTarget.TransformComponent.WorldPosition
		
		local direction = Vector2(targetPos.x - myPos.x, targetPos.y - myPos.y):Normalize()
		local newX = myPos.x + (direction.x * self.moveSpeed * delta)
		
		-- 기존의 Y 좌표는 유지
		self.Entity.TransformComponent.WorldPosition = Vector3(newX, myPos.y, myPos.z)
	end

	@ExecSpace("Client")
	method void Attack(number delta)
		if self.curTarget == nil or self:GetDistance() > self.attackRange then
			self:SetState("stand")
			return
		end
		
		self.AttackTimer += delta;
		
		if self.AttackTimer >= self.attackSpeed and self.attackRange == 1 then
			self:Melee_Attack()
			self.AttackTimer = 0
		elseif self.AttackTimer >= self.attackSpeed and self.attackRange > 1 then
			self:Range_Attack("")
			self.AttackTimer = 0
		end
	end

	@ExecSpace("Client")
	method void Melee_Attack()
		if self.curState ~= "attack" then
			return
		end
		
		-- 마나 충전
		self:IncreaseMp()
		
		if self.Entity.StateAnimationComponent.ActionSheet:ContainsKey("attack") == false and self.Entity.TweenLineComponent.CurrentState ~= TweenState.Playing then
			self.originPos = self.Entity.TransformComponent.WorldPosition
			self:PlayTween()
			self:Attack_Damage()
			self:PlayEffect("a05c1966e31a4c409cc263215f786d2e", Vector3(-0.5,0,0))
		else
			self:SetState("attack")
			
			-- 애니메이션 배율 계산
			local animationPlaySpeed = self.attackAnimationPlayingTime / (self.attackSpeed - 0.1)
			self.Entity.SpriteRendererComponent.PlayRate = animationPlaySpeed
			
			local attackFunction = function() 
				self.Entity.AttackComponent:Attack(Vector2.one, Vector2.one, "")
				
				if self.passiveSkill ~= nil and self.passiveSkill.PassiveSkillParent.passiveType == _ePassiveType.OnAttack then
					self.passiveSkill.PassiveSkillParent:OnAttack()
				end
			end
			 
			local timerTiming = self.attackTiming / animationPlaySpeed
			if timerTiming < 0 then
				timerTiming = 0.5
			end
			
			_TimerService:SetTimerOnce(attackFunction, timerTiming)
		end
	end

	@ExecSpace("Client")
	method void Range_Attack(string spriteRUID)
		if self.curState ~= "attack" then
			return
		end
		
		-- 마나 충전
		self:IncreaseMp()
		
		if self._T.projectileParent == nil then
			self._T.projectileParent = _EntityService:GetEntityByPath("/maps/GameScene/ProjectileParent")
		end
		
		local projectile = _SpawnService:SpawnByModelId("model://cd38ad89-1c52-45f2-8d86-d6be27475ba9",
			"Projectile",
			self.Entity.TransformComponent.WorldPosition + (Vector3.up * 0.3),
			self._T.projectileParent)
		
		if self.passiveSkill ~= nil and self.passiveSkill.PassiveSkillParent.passiveType == _ePassiveType.OnAttack then
			self.passiveSkill.PassiveSkillParent:OnAttack()
		end
		
		projectile.Projectile:Init("1d18f288d2594495916f543ee5b6221b", 1, self.projectileSpeed, self.curTarget, true,self.damage)
	end

	@ExecSpace("Client")
	method void PlayTween()
		local tween = self.Entity.TweenLineComponent
		
		-- 트윈 설정
		local tweenDir = 0
		if self.isEnemy then
			tweenDir = -1
		else
			tweenDir = 1	
		end
		
		tween.DestinationCoordinateType = CoordinateType.Absolute
		tween.Positions = { Vector2(self.Entity.TransformComponent.WorldPosition.x + tweenDir, self.Entity.TransformComponent.WorldPosition.y) }
		tween.Duration = 0.1 -- 이동 시간 설정
		tween.UseReturnTweenType = true -- 반환 동작 설정
		tween.ReturnDuration = 0.1 -- 돌아올 때의 이동 시간 설정
		tween.ReturnTweenType = EaseType.Linear -- 되돌아올 때 보간 설정
		
		-- 트윈 시작
		tween:RestartFromCurrentPosition()
	end

	@ExecSpace("Client")
	method void Attack_Damage()
		self.curTarget.Unit:OnHit(self.Entity, self.damage, false, 1)
	end

	@ExecSpace("Client")
	method void PlayEffect(string effect, Vector3 pos)
		_EffectService:PlayEffectAttached(effect, self.Entity, pos, 0, Vector3.one)
	end

	@ExecSpace("Server")
	method void SetState(string state)
		if self.curState == "die" then
			return
		end
		
		self.curState = state
		
		if self.Entity.StateAnimationComponent.ActionSheet:ContainsKey(state:lower()) == false then
			return
		end
		
		log("스테이트"..state)
		self:SetAnimationState(state)
	end

	@ExecSpace("Server")
	method void SetAnimationState(string state)
		log("애니메이션"..state)
		self.Entity.StateComponent:ChangeState(state)
	end

	@ExecSpace("Client")
	method void GetBuff(number buffType, number buffAmount, number buffTime)
		if buffType == _eBuffType.AttackSpeedBuff then
			self:PlayEffect("7c3028f7053541a3869a94d3fbe9088b", Vector3(0, self.imageSize.y,0))
			if self.attackSpeed - buffAmount <= 0.5 then
				self.attackSpeed = 0.5
			else
				self.attackSpeed -= buffAmount
			end
			
			local deleteFunction = function()
				self.attackSpeed = self.originAttackSpeed
			end
		
			_TimerService:SetTimerOnce(deleteFunction, buffTime) 
		end
	end

	method void OnHit(Entity attacker, number damage, boolean isCritical, number attackCount)
		if self.hp <= 0 then
			return
		end
		
		self.Entity.HitComponent:OnHit(attacker, damage, isCritical, "", attackCount)
		self.hp -= damage
		
		if self.hp <= 0 then
			self:OnDie(attacker)
		end
	end

	method void OnDie(Entity attacker)
		if self.curState == "die" then
			return
		end
		
		self:SetState("die")
		
		-- 어태커의 타겟 엔티티 제거
		attacker.Unit.curTarget = nil
	end

	method void IncreaseMp()
		if self.curState == "useSkill" then
			return
		end
		
		self.mp += 5
		
		if self.mp < self.maxMP then
			return
		end
		
		self.curState = "useSkill"
	end

	method void UseSkill()
		if self.mp == 0 or self.curState ~= "useSkill" or self.isUsingSkill or self.activeSkill == nil then
			return
		end
		
		self.curState = "attack"
		self.mp = 0
		self.isUsingSkill = true
		
		self.activeSkill.SkillParent:UseSkill(self.Entity, self.curTarget, Vector2(self.skillArea, self.skillArea), self.skillAmount, 
			self.skillProjectileSpeed, self.skillTime)
	end

	method void SpawnEnemy(table unitData, table skillData)
		self.moveSpeed = unitData["moveSpeed"]
		self.hp = unitData["hp"]
		self.maxHP = unitData["hp"]
		self.damage = unitData["damage"]
		self.attackRange = unitData["attackRange"]
		self.attackSpeed = unitData["attackSpeed"]
		self.originAttackSpeed = unitData["attackSpeed"]
		self.projectileSpeed = unitData["projectileSpeed"]
		self.attackTiming = unitData["attackTiming"]
		self.maxMP = unitData["maxMp"]
		self.mp = unitData["startMp"]
		self.damage = unitData["damage"]
		self.unitName = unitData["name"]
		
		self.skillID = skillData['id']
		self.skillDesc = skillData['desc']
		self.skillArea = skillData['skillArea']
		self.skillAmount = skillData['skillAmount']
		self.skillProjectileSpeed = skillData['skillProjectileSpeed'] 
		self.skillTime = skillData['skillTime']
		self.skillAttackTiming = skillData['skillAttackTiming']
		
		self:InitEnemyTagData()
		self:InitData()
		self:InitSkillData()
		self:InitAnimData()
	end

	method void InitEnemyTagData()
		self.Entity:AddComponent(TagComponent)
		self.Entity.TagComponent:AddTag("Enemy")
		
		if self.Entity.TagComponent.Tags.Count <= 0 then
			return
		end
		
		if self.Entity.TagComponent.Tags[1] == "Enemy" then
			self.isEnemy = true;	
		end
		
		if self.isEnemy then
			self.Entity.SpriteRendererComponent.FlipX = false
		else
			self.Entity.SpriteRendererComponent.FlipX = true
		end
	end

	@ExecSpace("Server")
	method void DestroyAction()
		self.Entity:Destroy()
	end

	@EventSender("Self")
	handler HandleSpriteAnimPlayerEndFrameEvent(SpriteAnimPlayerEndFrameEvent event)
		--------------- Native Event Sender Info ----------------
		-- Sender: ClimbableSpriteRendererComponent
		-- Space: Client
		---------------------------------------------------------
		-- Sender: SpriteRendererComponent
		-- Space: Client
		---------------------------------------------------------
		
		-- Parameters
		-- local FrameIndex = event.FrameIndex
		-- local ReversePlaying = event.ReversePlaying
		-- local TotalFrameCount = event.TotalFrameCount
		-- local AnimPlayer = event.AnimPlayer
		---------------------------------------------------------
		if self.curState == "attack" then
			self:SetAnimationState("stand")
			self.Entity.SpriteRendererComponent.PlayRate = 1
		end
		
		if self.curState == "die" then
			log("죽음")
			self:DestroyAction()
		end
	end

	@EventSender("Service", "InputService")
	handler HandleKeyDownEvent(KeyDownEvent event)
		--------------- Native Event Sender Info ----------------
		-- Sender: InputService
		-- Space: Client
		---------------------------------------------------------
		
		-- Parameters
		-- local key = event.key
		---------------------------------------------------------
		if event.key == KeyboardKey.Space then
			self:UseSkill()
		end
	end

end