@Component
script UnitListItem extends Component

	property table unitData = {}

	property table skillData = {}

	@Sync
	property Entity unitSprite = nil

	@Sync
	property Entity unitAvartarRenderer = nil

	@Sync
	property Entity unitName = nil

	@Sync
	property Entity skillDesc = nil

	property Entity unitInfoUI = "53e0a15f-931e-46fe-b601-b05b2575fe14"

	@Sync
	property Entity unitPriceSprite = nil

	@Sync
	property Entity unitPriceLabel = nil

	method void Init(table unitData, table skillData)
		self.unitData = unitData
		self.skillData = skillData
		
		self.unitSprite = self.Entity.Children[1]
		self.unitAvartarRenderer = self.Entity.Children[2]
		self.unitName = self.Entity.Children[3]
		self.skillDesc = self.Entity.Children[4]
		self.unitPriceSprite = self.Entity.Children[5]
		self.unitPriceLabel = self.Entity.Children[6]
		
		self:RefreshUI()
	end

	method void RefreshUI()
		if self.unitData['isUsableCharacter'] == 0 then
			self.unitAvartarRenderer.Visible = false
			self.unitSprite.SpriteGUIRendererComponent.ImageRUID = self.unitData['ImageRUID']
		else
			self.unitSprite.Visible = false
			self:SetCostume()
		end
		
		self.unitName.TextComponent.Text = self.unitData['name']
		self.skillDesc.TextComponent.Text = self.skillData['desc']
		self.unitPriceLabel.TextComponent.Text = self.unitData['summonCost']
	end

	method void SetCostume()
		local entity = _SpawnService:SpawnByModelId(self.unitData['id'], "Avatar", Vector3.zero, self.Entity)
		entity.Visible = false
		entity.Enable = false
		
		self.unitAvartarRenderer.CostumeManagerComponent.CustomBodyEquip = entity.CostumeManagerComponent.CustomBodyEquip
		self.unitAvartarRenderer.CostumeManagerComponent.CustomCapEquip = entity.CostumeManagerComponent.CustomCapEquip
		self.unitAvartarRenderer.CostumeManagerComponent.CustomCapeEquip = entity.CostumeManagerComponent.CustomCapeEquip
		self.unitAvartarRenderer.CostumeManagerComponent.CustomCoatEquip = entity.CostumeManagerComponent.CustomCoatEquip
		self.unitAvartarRenderer.CostumeManagerComponent.CustomEarAccessoryEquip = entity.CostumeManagerComponent.CustomEarAccessoryEquip
		self.unitAvartarRenderer.CostumeManagerComponent.CustomEarEquip = entity.CostumeManagerComponent.CustomEarEquip
		self.unitAvartarRenderer.CostumeManagerComponent.CustomEyeAccessoryEquip = entity.CostumeManagerComponent.CustomEyeAccessoryEquip
		self.unitAvartarRenderer.CostumeManagerComponent.CustomFaceAccessoryEquip = entity.CostumeManagerComponent.CustomFaceAccessoryEquip
		self.unitAvartarRenderer.CostumeManagerComponent.CustomFaceEquip = entity.CostumeManagerComponent.CustomFaceEquip
		self.unitAvartarRenderer.CostumeManagerComponent.CustomGloveEquip = entity.CostumeManagerComponent.CustomGloveEquip
		self.unitAvartarRenderer.CostumeManagerComponent.CustomHairEquip = entity.CostumeManagerComponent.CustomHairEquip
		self.unitAvartarRenderer.CostumeManagerComponent.CustomLongcoatEquip = entity.CostumeManagerComponent.CustomLongcoatEquip
		self.unitAvartarRenderer.CostumeManagerComponent.CustomOneHandedWeaponEquip = entity.CostumeManagerComponent.CustomOneHandedWeaponEquip
		self.unitAvartarRenderer.CostumeManagerComponent.CustomPantsEquip = entity.CostumeManagerComponent.CustomPantsEquip
		self.unitAvartarRenderer.CostumeManagerComponent.CustomShoesEquip = entity.CostumeManagerComponent.CustomShoesEquip
		self.unitAvartarRenderer.CostumeManagerComponent.CustomSubWeaponEquip = entity.CostumeManagerComponent.CustomSubWeaponEquip
		self.unitAvartarRenderer.CostumeManagerComponent.CustomTwoHandedWeaponEquip = entity.CostumeManagerComponent.CustomTwoHandedWeaponEquip
	end

	@EventSender("Self")
	handler HandleButtonClickEvent(ButtonClickEvent event)
		local playerDeck = _EntityService:GetEntityByTag("Player").UserDeck
		local userDeckUI = _EntityService:GetEntityByPath("/ui/UserDeckUI/UserDeck").UserDeckUI
		local unitListUI = _EntityService:GetEntityByPath("/ui/UserDeckUI/UserDeck/UnitListUI").UnitListUI
		local index = unitListUI.itemIndex
		
		userDeckUI.deckItems[index].DeckItem:Init(self.unitData, self.skillData)
		userDeckUI.unitListUI.Enable = false
		userDeckUI.unitListUI.Visible = false
		playerDeck:SetDeckItem(self.unitData['id'], index)
	end

	@EventSender("Self")
	handler HandleUITouchDownEvent(UITouchDownEvent event)
		if event.TouchId ~= -2 then
			return
		end 
		
		
		local iconTransform = self.Entity.UITransformComponent
		local iconPos = iconTransform.anchoredPosition
		local pos = event.TouchPoint
		
		self.unitInfoUI.UITransformComponent.anchoredPosition = Vector2(pos.x - 750, pos.y - 450)
		self.unitInfoUI.UnitInfo:UpdateInfo(self.skillData)
		
		self.unitInfoUI.Visible = true
	end

	@EventSender("Self")
	handler HandleUITouchUpEvent(UITouchUpEvent event)
		self.unitInfoUI.Visible = false
	end

end