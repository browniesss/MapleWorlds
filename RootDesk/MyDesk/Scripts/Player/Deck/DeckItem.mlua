@Component
script DeckItem extends Component

	property table unitData = {}

	property table skillData = {}

	@Sync
	property Entity redDotSprite = nil

	@Sync
	property Entity unitSprite = nil

	@Sync
	property Entity unitAvartarRenderer = nil

	@Sync
	property Entity unitName = nil

	@Sync
	property Entity unitFrameSprite = nil

	@Sync
	property Entity unitPriceSprite = nil

	@Sync
	property Entity unitPriceLabel = nil

	@Sync
	property integer itemIndex = 0

	property Entity unitInfoUI = "53e0a15f-931e-46fe-b601-b05b2575fe14"

	method void Init(table unitData, table skillData)
		self.unitData = unitData
		self.skillData = skillData
		
		self.redDotSprite = self.Entity.Children[2]
		self.unitSprite = self.Entity.Children[3]
		self.unitAvartarRenderer = self.Entity.Children[4]
		self.unitName = self.Entity.Children[5]
		self.unitPriceSprite = self.Entity.Children[6]
		self.unitPriceLabel = self.Entity.Children[7]
		self.unitFrameSprite = self.Entity
		
		self:RefreshUI()
	end

	@ExecSpace("Client")
	method void SetDataInClient(table unitData, table skillData)
		self.unitData = unitData
		self.skillData = skillData
	end

	method void RefreshUI()
		-- 해당 슬롯에 장착한 유닛이 없을 경우
		if self.unitData == nil then
			self.redDotSprite.Visible = true
			self.unitSprite.Visible = false
			self.unitName.Visible = false
			self.unitAvartarRenderer.Visible = false
			self.unitPriceSprite.Visible = false
			self.unitPriceLabel.Visible = false
			-- + 버튼 프레임
			self.unitFrameSprite.SpriteGUIRendererComponent.ImageRUID = "9242c303445244c5b1c123f453423ff3" 
		else
			self.redDotSprite.Visible = false
			self.unitSprite.Visible = true
			self.unitName.Visible = true
			self.unitAvartarRenderer.Visible = true
			self.unitPriceSprite.Visible = true
			self.unitPriceLabel.Visible = true
			-- 일반 프레임
			self.unitFrameSprite.SpriteGUIRendererComponent.ImageRUID = "9cabdd08cb834cbab689c6219db5db05"
			self.unitName.TextComponent.Text = self.unitData['name']
			self.unitPriceLabel.TextComponent.Text = self.unitData['summonCost']
			
			if self.unitData['isUsableCharacter'] == 0 then
				self.unitAvartarRenderer.Visible = false
				self.unitSprite.SpriteGUIRendererComponent.ImageRUID = self.unitData['ImageRUID']
			else
				self.unitSprite.Visible = false
				self:SetCostume()
			end
		end
	end

	method void SetCostume()
		local entity = _SpawnService:SpawnByModelId(self.unitData['id'], "Avatar", Vector3.zero, self.Entity)
		entity.Visible = false
		entity.Enable = false
		
		self.unitAvartarRenderer.CostumeManagerComponent.CustomBodyEquip = entity.CostumeManagerComponent.CustomBodyEquip
		self.unitAvartarRenderer.CostumeManagerComponent.CustomCapEquip = entity.CostumeManagerComponent.CustomCapEquip
		self.unitAvartarRenderer.CostumeManagerComponent.CustomCapeEquip = entity.CostumeManagerComponent.CustomCapeEquip
		self.unitAvartarRenderer.CostumeManagerComponent.CustomCoatEquip = entity.CostumeManagerComponent.CustomCoatEquip
		self.unitAvartarRenderer.CostumeManagerComponent.CustomEarAccessoryEquip = entity.CostumeManagerComponent.CustomEarAccessoryEquip
		self.unitAvartarRenderer.CostumeManagerComponent.CustomEarEquip = entity.CostumeManagerComponent.CustomEarEquip
		self.unitAvartarRenderer.CostumeManagerComponent.CustomEyeAccessoryEquip = entity.CostumeManagerComponent.CustomEyeAccessoryEquip
		self.unitAvartarRenderer.CostumeManagerComponent.CustomFaceAccessoryEquip = entity.CostumeManagerComponent.CustomFaceAccessoryEquip
		self.unitAvartarRenderer.CostumeManagerComponent.CustomFaceEquip = entity.CostumeManagerComponent.CustomFaceEquip
		self.unitAvartarRenderer.CostumeManagerComponent.CustomGloveEquip = entity.CostumeManagerComponent.CustomGloveEquip
		self.unitAvartarRenderer.CostumeManagerComponent.CustomHairEquip = entity.CostumeManagerComponent.CustomHairEquip
		self.unitAvartarRenderer.CostumeManagerComponent.CustomLongcoatEquip = entity.CostumeManagerComponent.CustomLongcoatEquip
		self.unitAvartarRenderer.CostumeManagerComponent.CustomOneHandedWeaponEquip = entity.CostumeManagerComponent.CustomOneHandedWeaponEquip
		self.unitAvartarRenderer.CostumeManagerComponent.CustomPantsEquip = entity.CostumeManagerComponent.CustomPantsEquip
		self.unitAvartarRenderer.CostumeManagerComponent.CustomShoesEquip = entity.CostumeManagerComponent.CustomShoesEquip
		self.unitAvartarRenderer.CostumeManagerComponent.CustomSubWeaponEquip = entity.CostumeManagerComponent.CustomSubWeaponEquip
		self.unitAvartarRenderer.CostumeManagerComponent.CustomTwoHandedWeaponEquip = entity.CostumeManagerComponent.CustomTwoHandedWeaponEquip
	end

	@EventSender("Self")
	handler HandleButtonClickEvent(ButtonClickEvent event)
		local userDeckUI = _EntityService:GetEntityByPath("/ui/UserDeckUI/UserDeck").UserDeckUI
		
		userDeckUI.unitListUI.Enable = true
		
		userDeckUI.unitListUI.UnitListUI:OpenListUI(self.itemIndex)
		
		userDeckUI.unitListUI.Visible = true
	end

	@EventSender("Self")
	handler HandleUITouchDownEvent(UITouchDownEvent event)
		if event.TouchId ~= -2 then
			return
		end 
		
		local iconTransform = self.Entity.UITransformComponent
		local iconPos = iconTransform.anchoredPosition
		
		-- self.unitInfoUI.UITransformComponent.anchoredPosition = Vector2(iconPos.x + 300, iconPos.y + 150)
		self.unitInfoUI.UnitInfo:UpdateInfo(self.skillData, self.unitData)
		
		self.unitInfoUI.Visible = true
	end

	@EventSender("Self")
	handler HandleUITouchExitEvent(UITouchExitEvent event)
		self.unitInfoUI.Visible = false
	end

	@EventSender("Self")
	handler HandleUITouchUpEvent(UITouchUpEvent event)
		self.unitInfoUI.Visible = false
	end

end