@Component
script SkillParent extends Component

	@Sync
	property Entity caster = nil

	@Sync
	property Entity target = nil

	@Sync
	property integer skillArea = 0

	@Sync
	property number skillAmount = 0

	@Sync
	property number skillProjectileSpeed = 0

	@Sync
	property number skillTime = 0

	@Sync
	property number skillAttackTiming = 0

	method void InitializeSkill(Entity caster, Entity target, integer skillArea, number skillAmount, number skillProjectileSpeed, number skillTime, number skillAttackTiming)
		self.caster = caster
		self.target = target
		self.skillArea = skillArea
		self.skillAmount = skillAmount
		self.skillProjectileSpeed = skillProjectileSpeed
		self.skillTime = skillTime
		self.skillAttackTiming = skillAttackTiming
	end

	method void UseSkill(Entity caster, Entity target, integer skillArea, number skillAmount, number skillProjectileSpeed, number skillTime, number skillAttackTiming)
		self:InitializeSkill(caster, target, skillArea, skillAmount, skillProjectileSpeed, skillTime, skillAttackTiming)
		self:ActivateSkill()
	end

	@ExecSpace("Client")
	method void ActivateSkill()
		
	end

	method void DestroySkill()
		self.Entity:Destroy(3 + self.skillTime)
	end

	method void CallAnimation(string skillName)
		self.caster.AvatarAnimationComponent:PlayOnce(skillName, 1, function()
			self:SkillEnd()
		end)
	end

	method void CallSequenceAnimation(string skillName1, number rate1, string skillName2, number rate2)
		self.caster.AvatarAnimationComponent:PlayOnce(skillName1, rate1, function()
			self.caster.AvatarAnimationComponent:PlayOnce(skillName2, rate2, function()
				self:SkillEnd()
			end)
		end)
	end

	method void SkillEnd()
		if self.caster.Unit.curState == "die" then
			return
		end
		
		self.caster.Unit.isUsingSkill = false
		
		if not isvalid(self.target) or self.target.Unit.curState == "die" then
			self.caster.Unit.curState = "stand"
			self.caster.Unit.curTarget = nil
			return
		end
		
		self.caster.Unit.curState = "attack"
	end

	method number IsTargetOnRight(Entity targetEntity)
		if isvalid(targetEntity) == false then
			return -1
		end
		
		local myX = self.Entity.TransformComponent.Position.x
		local targetX = targetEntity.TransformComponent.Position.x
		
		if targetX > myX then
		    return 1 -- 오른쪽에 있음
		else
		    return 0 -- 왼쪽이거나 같은 위치
		end
	end

	method table AttackNearByEnemies(integer attackCount, integer targetCount)
		local nearbyEnemies = self:FindNearByEnemies()
		
		if #nearbyEnemies == 0 then return end
		
		-- 3명 랜덤 선택
		local selected = {}
		while #selected < math.min(targetCount, #nearbyEnemies) do
		    local index = math.random(1, #nearbyEnemies)
		    local target = nearbyEnemies[index]
		    if not self:tableContains(selected, target) then
		        table.insert(selected, target)
		    end
		end
		
		-- 데미지 주기
		for _, target in ipairs(selected) do
		    target.Unit:OnHit(self.caster, self.skillAmount, false, attackCount)
		end
	end

	method table FindNearByEnemies()
		local pos = self.caster.TransformComponent.WorldPosition
		local allEntities
		
		if self.caster.Unit.isEnemy then
			allEntities = _EntityService:GetEntityByPath(_GameManager:GetGameMapName()..'/MyMonsterList').Children
		else
			allEntities = _EntityService:GetEntityByPath(_GameManager:GetGameMapName()..'/EnemyList').Children
		end
		
		local nearbyEnemies = {}
		
		for _, entity in ipairs(allEntities) do
		    if entity ~= self.caster and entity.HitComponent then
		        local targetPos = entity.TransformComponent.WorldPosition
		        local distance = (targetPos - pos).x
		        if distance <= self.skillArea then
		            table.insert(nearbyEnemies, entity)
		        end
		    end
		end
		
		return nearbyEnemies
	end

	method boolean tableContains(table tbl, Entity element)
		for _, value in pairs(tbl) do
		    if value == element then
		        return true
		    end
		end
		
		return false
	end

end