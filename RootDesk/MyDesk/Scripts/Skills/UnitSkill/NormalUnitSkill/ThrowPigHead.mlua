@Component
script ThrowPigHead extends SkillParent

	property table spawnedMissiles = {}

	@ExecSpace("Client")
	method void ActivateSkill()
		__base:ActivateSkill()
		
		if self._T.projectileParent == nil then
			self._T.projectileParent = _EntityService:GetEntityByPath(_GameManager:GetGameMapName().."/ProjectileParent")
		end
		
		local spawnDelay = 0.25
		local spawnIndex = 1
		local basePos = self.Entity.TransformComponent.WorldPosition
		local offset = { Vector3(-0.5, 0.4, 0), Vector3(-0.2, 0.4, 0), Vector3(0.1, 0.4, 0) }
		
		local spawnFunction = function()
			local missile = _SpawnService:SpawnByModelId("model://cd38ad89-1c52-45f2-8d86-d6be27475ba9",
				 "pigHead",
				 basePos + offset[spawnIndex],
				 self._T.projectileParent)
		
			missile.SpriteRendererComponent.SpriteRUID = "238e2a90da124301b959f8b745214026"
			missile.Projectile:SetCaster(self.caster)
			
			spawnIndex += 1
		    table.insert(self.spawnedMissiles, missile)
		end
		
		local spawnTimer = _TimerService:SetTimer(self, spawnFunction, spawnDelay, true)
		
		local attackFunction = function() 
			for i, missile in ipairs(self.spawnedMissiles) do
		        missile.Projectile:SetShoot("238e2a90da124301b959f8b745214026", self:IsTargetOnRight(self.target), self.skillProjectileSpeed,
					 self.target, false, self.skillAmount)
		    end
			
			_TimerService:ClearTimer(spawnTimer)
			
			-- 스킬 사용 완료 처리
			if self.caster.Unit.curState == "die" then
				return
			end
			
			self.caster.Unit.isUsingSkill = false
			self.caster.Unit.curState = "attack"
			self.spawnedMissiles = {}
		end
		
		_TimerService:SetTimerOnce(attackFunction, spawnDelay * 3)
	end

end