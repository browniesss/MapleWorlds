@Component
script UnitShopItem extends Component

	property table unitData = {}

	property table skillData = {}

	@Sync
	property Entity unitSprite = nil

	@Sync
	property Entity priceSprite = nil

	@Sync
	property Entity priceLabel = nil

	@Sync
	property integer id = 0

	@Sync
	property UnitShop shop = nil

	property Entity unitInfoUI = "cc09e962-b96a-4b3f-a20e-e48ff46bd5ef"

	@ExecSpace("ClientOnly")
	method void OnBeginPlay()
		self:SetEntity()
	end

	@ExecSpace("ClientOnly")
	method void SetEntity()
		self.unitSprite = self.Entity.Children[1]
		self.priceSprite = self.Entity.Children[2]
		self.priceLabel = self.Entity.Children[3]
	end

	@ExecSpace("ClientOnly")
	method void Initialize(table unitData, integer id, UnitShop shop, table skillData)
		self.unitData = unitData
		self.id = id
		self.shop = shop
		self.skillData = skillData
		
		self:SetEntity()
		self:SetSprite()
		self:SetLabel()
	end

	@ExecSpace("ClientOnly")
	method void SetSprite()
		self.unitSprite.SpriteGUIRendererComponent.ImageRUID = self.unitData['ImageRUID']
	end

	method void SetLabel()
		self.priceLabel.TextComponent.Text = self.unitData['summonCost']
	end

	@EventSender("Self")
	handler HandleButtonClickEvent(ButtonClickEvent event)
		--------------- Native Event Sender Info ----------------
		-- Sender: ButtonComponent
		-- Space: Client
		---------------------------------------------------------
		
		-- Parameters
		-- local Entity = event.Entity
		---------------------------------------------------------
		
		if not _SpawnManager:IsCanSpawn(self.unitData['summonCost'])then
			return
		end
		
		_SpawnManager:Spawn(self.unitData['id'], self.unitData['summonCost'])
		self.shop:OnSpawn(self.id)
	end

	@EventSender("Self")
	handler HandleUITouchDownEvent(UITouchDownEvent event)
		--------------- Native Event Sender Info ----------------
		-- Sender: UITouchReceiveComponent
		-- Space: Client
		---------------------------------------------------------
		
		-- Parameters
		-- local Entity = event.Entity
		-- local TouchId = event.TouchId
		-- local TouchPoint = event.TouchPoint
		---------------------------------------------------------
		if event.TouchId ~= -2 then
			return
		end 
		
		self.unitInfoUI.Visible = true
		self.unitInfoUI.UnitInfo:UpdateInfo(self.unitData, self.skillData)
	end

	@EventSender("Self")
	handler HandleUITouchExitEvent(UITouchExitEvent event)
		--------------- Native Event Sender Info ----------------
		-- Sender: UITouchReceiveComponent
		-- Space: Client
		---------------------------------------------------------
		
		-- Parameters
		-- local Entity = event.Entity
		-- local TouchId = event.TouchId
		-- local TouchPoint = event.TouchPoint
		------------------------------------------------------
		
		self.unitInfoUI.Visible = false
	end

end