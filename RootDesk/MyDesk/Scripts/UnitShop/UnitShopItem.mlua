@Component
script UnitShopItem extends Component

	property table unitData = {}

	property table skillData = {}

	@Sync
	property Entity frameSprite = nil

	@Sync
	property Entity unitSprite = nil

	@Sync
	property Entity priceSprite = nil

	@Sync
	property Entity priceLabel = nil

	@Sync
	property Entity unitAvartarRenderer = nil

	@Sync
	property integer id = 0

	@Sync
	property UnitShop shop = nil

	property Entity unitInfoUI = "cc09e962-b96a-4b3f-a20e-e48ff46bd5ef"

	property integer shopItemIndex = 0

	@Sync
	property Entity unitEntity = nil

	@Sync
	property Entity effectEntity = nil

	@ExecSpace("ClientOnly")
	method void OnBeginPlay()
		self:SetEntity()
	end

	@ExecSpace("ClientOnly")
	method void SetEntity()
		self.frameSprite = self.Entity
		self.unitSprite = self.Entity.Children[2]
		self.priceSprite = self.Entity.Children[3]
		self.unitAvartarRenderer = self.Entity.Children[4]
		self.priceLabel = self.Entity.Children[5]
		self.effectEntity = self.Entity.Children[1]
	end

	@ExecSpace("Client")
	method void Initialize(table unitData, integer id, UnitShop shop, table skillData)
		self.unitData = unitData
		self.id = id
		self.shop = shop
		self.skillData = skillData
		
		self:SetEntity()
		self:SetSprite()
		self:SetLabel()
		self:SetEffect()
	end

	@ExecSpace("Client")
	method void SetSprite()
		if self.unitData['isUsableCharacter'] == 0 then
			self.unitAvartarRenderer.Visible = false
			self.unitSprite.Visible = true
			self.unitSprite.SpriteGUIRendererComponent.ImageRUID = self.unitData['ImageRUID']
		else
			self.unitSprite.Visible = false
			self.unitAvartarRenderer.Visible = true
			self:SetCostume()
		end
		
	end

	method void SetCostume()
		local entity = _SpawnService:SpawnByModelId(self.unitData['id'], "Avatar", Vector3.zero, self.Entity)
		entity.Visible = false
		entity.Enable = false
		
		self.unitAvartarRenderer.CostumeManagerComponent.CustomBodyEquip = entity.CostumeManagerComponent.CustomBodyEquip
		self.unitAvartarRenderer.CostumeManagerComponent.CustomCapEquip = entity.CostumeManagerComponent.CustomCapEquip
		self.unitAvartarRenderer.CostumeManagerComponent.CustomCapeEquip = entity.CostumeManagerComponent.CustomCapeEquip
		self.unitAvartarRenderer.CostumeManagerComponent.CustomCoatEquip = entity.CostumeManagerComponent.CustomCoatEquip
		self.unitAvartarRenderer.CostumeManagerComponent.CustomEarAccessoryEquip = entity.CostumeManagerComponent.CustomEarAccessoryEquip
		self.unitAvartarRenderer.CostumeManagerComponent.CustomEarEquip = entity.CostumeManagerComponent.CustomEarEquip
		self.unitAvartarRenderer.CostumeManagerComponent.CustomEyeAccessoryEquip = entity.CostumeManagerComponent.CustomEyeAccessoryEquip
		self.unitAvartarRenderer.CostumeManagerComponent.CustomFaceAccessoryEquip = entity.CostumeManagerComponent.CustomFaceAccessoryEquip
		self.unitAvartarRenderer.CostumeManagerComponent.CustomFaceEquip = entity.CostumeManagerComponent.CustomFaceEquip
		self.unitAvartarRenderer.CostumeManagerComponent.CustomGloveEquip = entity.CostumeManagerComponent.CustomGloveEquip
		self.unitAvartarRenderer.CostumeManagerComponent.CustomHairEquip = entity.CostumeManagerComponent.CustomHairEquip
		self.unitAvartarRenderer.CostumeManagerComponent.CustomLongcoatEquip = entity.CostumeManagerComponent.CustomLongcoatEquip
		self.unitAvartarRenderer.CostumeManagerComponent.CustomOneHandedWeaponEquip = entity.CostumeManagerComponent.CustomOneHandedWeaponEquip
		self.unitAvartarRenderer.CostumeManagerComponent.CustomPantsEquip = entity.CostumeManagerComponent.CustomPantsEquip
		self.unitAvartarRenderer.CostumeManagerComponent.CustomShoesEquip = entity.CostumeManagerComponent.CustomShoesEquip
		self.unitAvartarRenderer.CostumeManagerComponent.CustomSubWeaponEquip = entity.CostumeManagerComponent.CustomSubWeaponEquip
		self.unitAvartarRenderer.CostumeManagerComponent.CustomTwoHandedWeaponEquip = entity.CostumeManagerComponent.CustomTwoHandedWeaponEquip
	end

	method void SetLabel()
		self.priceLabel.TextComponent.Text = self.unitData['summonCost']
	end

	method void SetEffect()
		if self.unitData['spawnSkill'] == "" then
			self.effectEntity.Visible = false
		else
			self.effectEntity.Visible = true
		end
	end

	@EventSender("Self")
	handler HandleButtonClickEvent(ButtonClickEvent event)
		if not _SpawnManager:IsCanSpawn(self.unitData['summonCost'])then
			return
		end
		
		_SpawnManager:Spawn(self.unitData['id'], self.unitData['summonCost'], Vector3.zero)
		
		self.shop:OnSpawn(self.id, self.unitData['summonCost'])
	end

	@EventSender("Self")
	handler HandleUITouchDownEvent(UITouchDownEvent event)
		if event.TouchId ~= -2 then
			return
		end 
		
		local iconTransform = self.frameSprite.UITransformComponent
		local iconPos = iconTransform.anchoredPosition
		
		-- self.unitInfoUI.UITransformComponent.anchoredPosition = Vector2(iconPos.x, iconPos.y + 150)
		self.unitInfoUI.UnitInfo:UpdateInfo(self.skillData, self.unitData)
		
		self.unitInfoUI.Visible = true
	end

	@EventSender("Self")
	handler HandleUITouchExitEvent(UITouchExitEvent event)
		self.unitInfoUI.Visible = false
	end

	@EventSender("Self")
	handler HandleUITouchUpEvent(UITouchUpEvent event)
		self.unitInfoUI.Visible = false
	end

	@EventSender("Service", "InputService")
	handler HandleKeyDownEvent(KeyDownEvent event)
		local isKeyDown = false
		
		if not _GameManager.isPlaying then
			return
		end
		
		if event.key == KeyboardKey.Q and self.shopItemIndex == 1 then
			isKeyDown = true
		elseif event.key == KeyboardKey.W and self.shopItemIndex == 2 then
			isKeyDown = true
		elseif event.key == KeyboardKey.E and self.shopItemIndex == 3 then
			isKeyDown = true
		elseif event.key == KeyboardKey.R and self.shopItemIndex == 4 then
			isKeyDown = true	
		end
		
		if not isKeyDown or not _SpawnManager:IsCanSpawn(self.unitData['summonCost']) then
			return
		end
		
		_SpawnManager:Spawn(self.unitData['id'], self.unitData['summonCost'], Vector3.zero)
		
		self.shop:OnSpawn(self.id, self.unitData['summonCost'])
	end

end